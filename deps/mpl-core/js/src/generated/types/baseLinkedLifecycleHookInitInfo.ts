/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getBaseExtraAccountDecoder,
  getBaseExtraAccountEncoder,
  getBasePluginAuthorityDecoder,
  getBasePluginAuthorityEncoder,
  getExternalCheckResultDecoder,
  getExternalCheckResultEncoder,
  getExternalPluginAdapterSchemaDecoder,
  getExternalPluginAdapterSchemaEncoder,
  getHookableLifecycleEventDecoder,
  getHookableLifecycleEventEncoder,
  type BaseExtraAccount,
  type BaseExtraAccountArgs,
  type BasePluginAuthority,
  type BasePluginAuthorityArgs,
  type ExternalCheckResult,
  type ExternalCheckResultArgs,
  type ExternalPluginAdapterSchema,
  type ExternalPluginAdapterSchemaArgs,
  type HookableLifecycleEvent,
  type HookableLifecycleEventArgs,
} from '.';

export type BaseLinkedLifecycleHookInitInfo = {
  hookedProgram: Address;
  initPluginAuthority: Option<BasePluginAuthority>;
  lifecycleChecks: Array<
    readonly [HookableLifecycleEvent, ExternalCheckResult]
  >;
  extraAccounts: Option<Array<BaseExtraAccount>>;
  dataAuthority: Option<BasePluginAuthority>;
  schema: Option<ExternalPluginAdapterSchema>;
};

export type BaseLinkedLifecycleHookInitInfoArgs = {
  hookedProgram: Address;
  initPluginAuthority: OptionOrNullable<BasePluginAuthorityArgs>;
  lifecycleChecks: Array<
    readonly [HookableLifecycleEventArgs, ExternalCheckResultArgs]
  >;
  extraAccounts: OptionOrNullable<Array<BaseExtraAccountArgs>>;
  dataAuthority: OptionOrNullable<BasePluginAuthorityArgs>;
  schema: OptionOrNullable<ExternalPluginAdapterSchemaArgs>;
};

export function getBaseLinkedLifecycleHookInitInfoEncoder(): Encoder<BaseLinkedLifecycleHookInitInfoArgs> {
  return getStructEncoder([
    ['hookedProgram', getAddressEncoder()],
    ['initPluginAuthority', getOptionEncoder(getBasePluginAuthorityEncoder())],
    [
      'lifecycleChecks',
      getArrayEncoder(
        getTupleEncoder([
          getHookableLifecycleEventEncoder(),
          getExternalCheckResultEncoder(),
        ])
      ),
    ],
    [
      'extraAccounts',
      getOptionEncoder(getArrayEncoder(getBaseExtraAccountEncoder())),
    ],
    ['dataAuthority', getOptionEncoder(getBasePluginAuthorityEncoder())],
    ['schema', getOptionEncoder(getExternalPluginAdapterSchemaEncoder())],
  ]);
}

export function getBaseLinkedLifecycleHookInitInfoDecoder(): Decoder<BaseLinkedLifecycleHookInitInfo> {
  return getStructDecoder([
    ['hookedProgram', getAddressDecoder()],
    ['initPluginAuthority', getOptionDecoder(getBasePluginAuthorityDecoder())],
    [
      'lifecycleChecks',
      getArrayDecoder(
        getTupleDecoder([
          getHookableLifecycleEventDecoder(),
          getExternalCheckResultDecoder(),
        ])
      ),
    ],
    [
      'extraAccounts',
      getOptionDecoder(getArrayDecoder(getBaseExtraAccountDecoder())),
    ],
    ['dataAuthority', getOptionDecoder(getBasePluginAuthorityDecoder())],
    ['schema', getOptionDecoder(getExternalPluginAdapterSchemaDecoder())],
  ]);
}

export function getBaseLinkedLifecycleHookInitInfoCodec(): Codec<
  BaseLinkedLifecycleHookInitInfoArgs,
  BaseLinkedLifecycleHookInitInfo
> {
  return combineCodec(
    getBaseLinkedLifecycleHookInitInfoEncoder(),
    getBaseLinkedLifecycleHookInitInfoDecoder()
  );
}
