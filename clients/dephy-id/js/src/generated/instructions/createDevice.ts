/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  none,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findDeviceAssetPda } from '../pdas';
import { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_DEVICE_DISCRIMINATOR = new Uint8Array([
  56, 101, 5, 177, 25, 113, 80, 174,
]);

export function getCreateDeviceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_DEVICE_DISCRIMINATOR
  );
}

export type CreateDeviceInstruction<
  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,
  TAccountMintAuthority extends string | AccountMeta<string> = string,
  TAccountProductAsset extends string | AccountMeta<string> = string,
  TAccountProductAccount extends string | AccountMeta<string> = string,
  TAccountDeviceAsset extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountMplCore extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMintAuthority extends string
        ? ReadonlySignerAccount<TAccountMintAuthority> &
            AccountSignerMeta<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountProductAsset extends string
        ? WritableAccount<TAccountProductAsset>
        : TAccountProductAsset,
      TAccountProductAccount extends string
        ? ReadonlyAccount<TAccountProductAccount>
        : TAccountProductAccount,
      TAccountDeviceAsset extends string
        ? WritableAccount<TAccountDeviceAsset>
        : TAccountDeviceAsset,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMplCore extends string
        ? ReadonlyAccount<TAccountMplCore>
        : TAccountMplCore,
      ...TRemainingAccounts,
    ]
  >;

export type CreateDeviceInstructionData = {
  discriminator: ReadonlyUint8Array;
  seed: ReadonlyUint8Array;
  name: string;
  uri: string;
  expiry: Option<bigint>;
};

export type CreateDeviceInstructionDataArgs = {
  seed: ReadonlyUint8Array;
  name: string;
  uri: string;
  expiry?: OptionOrNullable<number | bigint>;
};

export function getCreateDeviceInstructionDataEncoder(): Encoder<CreateDeviceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', fixEncoderSize(getBytesEncoder(), 32)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['expiry', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_DEVICE_DISCRIMINATOR,
      expiry: value.expiry ?? none(),
    })
  );
}

export function getCreateDeviceInstructionDataDecoder(): Decoder<CreateDeviceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', fixDecoderSize(getBytesDecoder(), 32)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['expiry', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getCreateDeviceInstructionDataCodec(): Codec<
  CreateDeviceInstructionDataArgs,
  CreateDeviceInstructionData
> {
  return combineCodec(
    getCreateDeviceInstructionDataEncoder(),
    getCreateDeviceInstructionDataDecoder()
  );
}

export type CreateDeviceAsyncInput<
  TAccountMintAuthority extends string = string,
  TAccountProductAsset extends string = string,
  TAccountProductAccount extends string = string,
  TAccountDeviceAsset extends string = string,
  TAccountOwner extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMplCore extends string = string,
> = {
  /** The authority of the product */
  mintAuthority: TransactionSigner<TAccountMintAuthority>;
  productAsset: Address<TAccountProductAsset>;
  productAccount?: Address<TAccountProductAccount>;
  /** This will be created by mpl-core as an asset of the product */
  deviceAsset?: Address<TAccountDeviceAsset>;
  owner: Address<TAccountOwner>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  mplCore?: Address<TAccountMplCore>;
  seed: CreateDeviceInstructionDataArgs['seed'];
  name: CreateDeviceInstructionDataArgs['name'];
  uri: CreateDeviceInstructionDataArgs['uri'];
  expiry?: CreateDeviceInstructionDataArgs['expiry'];
};

export async function getCreateDeviceInstructionAsync<
  TAccountMintAuthority extends string,
  TAccountProductAsset extends string,
  TAccountProductAccount extends string,
  TAccountDeviceAsset extends string,
  TAccountOwner extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountMplCore extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS,
>(
  input: CreateDeviceAsyncInput<
    TAccountMintAuthority,
    TAccountProductAsset,
    TAccountProductAccount,
    TAccountDeviceAsset,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCore
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateDeviceInstruction<
    TProgramAddress,
    TAccountMintAuthority,
    TAccountProductAsset,
    TAccountProductAccount,
    TAccountDeviceAsset,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCore
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DEPHY_ID_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    productAsset: { value: input.productAsset ?? null, isWritable: true },
    productAccount: { value: input.productAccount ?? null, isWritable: false },
    deviceAsset: { value: input.deviceAsset ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    mplCore: { value: input.mplCore ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.productAccount.value) {
    accounts.productAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.productAsset.value)),
      ],
    });
  }
  if (!accounts.deviceAsset.value) {
    accounts.deviceAsset.value = await findDeviceAssetPda({
      productAsset: expectAddress(accounts.productAsset.value),
      deviceSeed: expectSome(args.seed),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.mplCore.value) {
    accounts.mplCore.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.productAsset),
      getAccountMeta(accounts.productAccount),
      getAccountMeta(accounts.deviceAsset),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.mplCore),
    ],
    data: getCreateDeviceInstructionDataEncoder().encode(
      args as CreateDeviceInstructionDataArgs
    ),
    programAddress,
  } as CreateDeviceInstruction<
    TProgramAddress,
    TAccountMintAuthority,
    TAccountProductAsset,
    TAccountProductAccount,
    TAccountDeviceAsset,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCore
  >);
}

export type CreateDeviceInput<
  TAccountMintAuthority extends string = string,
  TAccountProductAsset extends string = string,
  TAccountProductAccount extends string = string,
  TAccountDeviceAsset extends string = string,
  TAccountOwner extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMplCore extends string = string,
> = {
  /** The authority of the product */
  mintAuthority: TransactionSigner<TAccountMintAuthority>;
  productAsset: Address<TAccountProductAsset>;
  productAccount: Address<TAccountProductAccount>;
  /** This will be created by mpl-core as an asset of the product */
  deviceAsset: Address<TAccountDeviceAsset>;
  owner: Address<TAccountOwner>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  mplCore?: Address<TAccountMplCore>;
  seed: CreateDeviceInstructionDataArgs['seed'];
  name: CreateDeviceInstructionDataArgs['name'];
  uri: CreateDeviceInstructionDataArgs['uri'];
  expiry?: CreateDeviceInstructionDataArgs['expiry'];
};

export function getCreateDeviceInstruction<
  TAccountMintAuthority extends string,
  TAccountProductAsset extends string,
  TAccountProductAccount extends string,
  TAccountDeviceAsset extends string,
  TAccountOwner extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountMplCore extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS,
>(
  input: CreateDeviceInput<
    TAccountMintAuthority,
    TAccountProductAsset,
    TAccountProductAccount,
    TAccountDeviceAsset,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCore
  >,
  config?: { programAddress?: TProgramAddress }
): CreateDeviceInstruction<
  TProgramAddress,
  TAccountMintAuthority,
  TAccountProductAsset,
  TAccountProductAccount,
  TAccountDeviceAsset,
  TAccountOwner,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountMplCore
> {
  // Program address.
  const programAddress = config?.programAddress ?? DEPHY_ID_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    productAsset: { value: input.productAsset ?? null, isWritable: true },
    productAccount: { value: input.productAccount ?? null, isWritable: false },
    deviceAsset: { value: input.deviceAsset ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    mplCore: { value: input.mplCore ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.mplCore.value) {
    accounts.mplCore.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.productAsset),
      getAccountMeta(accounts.productAccount),
      getAccountMeta(accounts.deviceAsset),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.mplCore),
    ],
    data: getCreateDeviceInstructionDataEncoder().encode(
      args as CreateDeviceInstructionDataArgs
    ),
    programAddress,
  } as CreateDeviceInstruction<
    TProgramAddress,
    TAccountMintAuthority,
    TAccountProductAsset,
    TAccountProductAccount,
    TAccountDeviceAsset,
    TAccountOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCore
  >);
}

export type ParsedCreateDeviceInstruction<
  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The authority of the product */
    mintAuthority: TAccountMetas[0];
    productAsset: TAccountMetas[1];
    productAccount: TAccountMetas[2];
    /** This will be created by mpl-core as an asset of the product */
    deviceAsset: TAccountMetas[3];
    owner: TAccountMetas[4];
    payer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    mplCore: TAccountMetas[7];
  };
  data: CreateDeviceInstructionData;
};

export function parseCreateDeviceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateDeviceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mintAuthority: getNextAccount(),
      productAsset: getNextAccount(),
      productAccount: getNextAccount(),
      deviceAsset: getNextAccount(),
      owner: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      mplCore: getNextAccount(),
    },
    data: getCreateDeviceInstructionDataDecoder().decode(instruction.data),
  };
}
