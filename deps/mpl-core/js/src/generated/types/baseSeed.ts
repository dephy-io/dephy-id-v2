/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU32Decoder,
  getU32Encoder,
  getUnitDecoder,
  getUnitEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type BaseSeed =
  | { __kind: 'Collection' }
  | { __kind: 'Owner' }
  | { __kind: 'Recipient' }
  | { __kind: 'Asset' }
  | { __kind: 'Address'; fields: readonly [Address] }
  | { __kind: 'Bytes'; fields: readonly [ReadonlyUint8Array] };

export type BaseSeedArgs = BaseSeed;

export function getBaseSeedEncoder(): Encoder<BaseSeedArgs> {
  return getDiscriminatedUnionEncoder([
    ['Collection', getUnitEncoder()],
    ['Owner', getUnitEncoder()],
    ['Recipient', getUnitEncoder()],
    ['Asset', getUnitEncoder()],
    [
      'Address',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
    [
      'Bytes',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getBaseSeedDecoder(): Decoder<BaseSeed> {
  return getDiscriminatedUnionDecoder([
    ['Collection', getUnitDecoder()],
    ['Owner', getUnitDecoder()],
    ['Recipient', getUnitDecoder()],
    ['Asset', getUnitDecoder()],
    [
      'Address',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
    [
      'Bytes',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getBaseSeedCodec(): Codec<BaseSeedArgs, BaseSeed> {
  return combineCodec(getBaseSeedEncoder(), getBaseSeedDecoder());
}

// Data Enum Helpers.
export function baseSeed(
  kind: 'Collection'
): GetDiscriminatedUnionVariant<BaseSeedArgs, '__kind', 'Collection'>;
export function baseSeed(
  kind: 'Owner'
): GetDiscriminatedUnionVariant<BaseSeedArgs, '__kind', 'Owner'>;
export function baseSeed(
  kind: 'Recipient'
): GetDiscriminatedUnionVariant<BaseSeedArgs, '__kind', 'Recipient'>;
export function baseSeed(
  kind: 'Asset'
): GetDiscriminatedUnionVariant<BaseSeedArgs, '__kind', 'Asset'>;
export function baseSeed(
  kind: 'Address',
  data: GetDiscriminatedUnionVariantContent<
    BaseSeedArgs,
    '__kind',
    'Address'
  >['fields']
): GetDiscriminatedUnionVariant<BaseSeedArgs, '__kind', 'Address'>;
export function baseSeed(
  kind: 'Bytes',
  data: GetDiscriminatedUnionVariantContent<
    BaseSeedArgs,
    '__kind',
    'Bytes'
  >['fields']
): GetDiscriminatedUnionVariant<BaseSeedArgs, '__kind', 'Bytes'>;
export function baseSeed<K extends BaseSeedArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBaseSeed<K extends BaseSeed['__kind']>(
  kind: K,
  value: BaseSeed
): value is BaseSeed & { __kind: K } {
  return value.__kind === kind;
}
