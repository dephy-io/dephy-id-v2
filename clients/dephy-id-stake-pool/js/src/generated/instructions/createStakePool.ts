/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getNftCollectionDecoder,
  getNftCollectionEncoder,
  type NftCollection,
  type NftCollectionArgs,
} from '../types';

export const CREATE_STAKE_POOL_DISCRIMINATOR = new Uint8Array([
  198, 175, 88, 63, 128, 43, 8, 214,
]);

export function getCreateStakePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_STAKE_POOL_DISCRIMINATOR
  );
}

export type CreateStakePoolInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountStakeTokenMint extends string | IAccountMeta<string> = string,
  TAccountRewardTokenMint extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountRewardTokenAccount extends string | IAccountMeta<string> = string,
  TAccountCommissionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakeTokenProgram extends string | IAccountMeta<string> = string,
  TAccountRewardTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableSignerAccount<TAccountStakePool> &
            IAccountSignerMeta<TAccountStakePool>
        : TAccountStakePool,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountStakeTokenMint extends string
        ? ReadonlyAccount<TAccountStakeTokenMint>
        : TAccountStakeTokenMint,
      TAccountRewardTokenMint extends string
        ? ReadonlyAccount<TAccountRewardTokenMint>
        : TAccountRewardTokenMint,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountStakeTokenAccount extends string
        ? WritableAccount<TAccountStakeTokenAccount>
        : TAccountStakeTokenAccount,
      TAccountRewardTokenAccount extends string
        ? ReadonlyAccount<TAccountRewardTokenAccount>
        : TAccountRewardTokenAccount,
      TAccountCommissionTokenAccount extends string
        ? ReadonlyAccount<TAccountCommissionTokenAccount>
        : TAccountCommissionTokenAccount,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeTokenProgram extends string
        ? ReadonlyAccount<TAccountStakeTokenProgram>
        : TAccountStakeTokenProgram,
      TAccountRewardTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardTokenProgram>
        : TAccountRewardTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateStakePoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  nftCollection: NftCollection;
  minStakeAmount: bigint;
  maxStakeAmount: bigint;
  minLocktime: bigint;
  maxLocktime: bigint;
  commission: bigint;
};

export type CreateStakePoolInstructionDataArgs = {
  nftCollection: NftCollectionArgs;
  minStakeAmount: number | bigint;
  maxStakeAmount: number | bigint;
  minLocktime: number | bigint;
  maxLocktime: number | bigint;
  commission: number | bigint;
};

export function getCreateStakePoolInstructionDataEncoder(): Encoder<CreateStakePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['nftCollection', getNftCollectionEncoder()],
      ['minStakeAmount', getU64Encoder()],
      ['maxStakeAmount', getU64Encoder()],
      ['minLocktime', getU64Encoder()],
      ['maxLocktime', getU64Encoder()],
      ['commission', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_STAKE_POOL_DISCRIMINATOR })
  );
}

export function getCreateStakePoolInstructionDataDecoder(): Decoder<CreateStakePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['nftCollection', getNftCollectionDecoder()],
    ['minStakeAmount', getU64Decoder()],
    ['maxStakeAmount', getU64Decoder()],
    ['minLocktime', getU64Decoder()],
    ['maxLocktime', getU64Decoder()],
    ['commission', getU64Decoder()],
  ]);
}

export function getCreateStakePoolInstructionDataCodec(): Codec<
  CreateStakePoolInstructionDataArgs,
  CreateStakePoolInstructionData
> {
  return combineCodec(
    getCreateStakePoolInstructionDataEncoder(),
    getCreateStakePoolInstructionDataDecoder()
  );
}

export type CreateStakePoolAsyncInput<
  TAccountStakePool extends string = string,
  TAccountAuthority extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountRewardTokenMint extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountCommissionTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeTokenProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
> = {
  stakePool: TransactionSigner<TAccountStakePool>;
  authority: TransactionSigner<TAccountAuthority>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  rewardTokenMint: Address<TAccountRewardTokenMint>;
  poolWallet?: Address<TAccountPoolWallet>;
  stakeTokenAccount?: Address<TAccountStakeTokenAccount>;
  rewardTokenAccount?: Address<TAccountRewardTokenAccount>;
  commissionTokenAccount?: Address<TAccountCommissionTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeTokenProgram: Address<TAccountStakeTokenProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  nftCollection: CreateStakePoolInstructionDataArgs['nftCollection'];
  minStakeAmount: CreateStakePoolInstructionDataArgs['minStakeAmount'];
  maxStakeAmount: CreateStakePoolInstructionDataArgs['maxStakeAmount'];
  minLocktime: CreateStakePoolInstructionDataArgs['minLocktime'];
  maxLocktime: CreateStakePoolInstructionDataArgs['maxLocktime'];
  commission: CreateStakePoolInstructionDataArgs['commission'];
};

export async function getCreateStakePoolInstructionAsync<
  TAccountStakePool extends string,
  TAccountAuthority extends string,
  TAccountStakeTokenMint extends string,
  TAccountRewardTokenMint extends string,
  TAccountPoolWallet extends string,
  TAccountStakeTokenAccount extends string,
  TAccountRewardTokenAccount extends string,
  TAccountCommissionTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountStakeTokenProgram extends string,
  TAccountRewardTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CreateStakePoolAsyncInput<
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram,
    TAccountRewardTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateStakePoolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram,
    TAccountRewardTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    rewardTokenMint: {
      value: input.rewardTokenMint ?? null,
      isWritable: false,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: false,
    },
    commissionTokenAccount: {
      value: input.commissionTokenAccount ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeTokenProgram: {
      value: input.stakeTokenProgram ?? null,
      isWritable: false,
    },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.stakeTokenAccount.value) {
    accounts.stakeTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([83, 84, 65, 75, 69, 95, 84, 79, 75, 69, 78])
        ),
      ],
    });
  }
  if (!accounts.rewardTokenAccount.value) {
    accounts.rewardTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([82, 69, 87, 65, 82, 68, 95, 84, 79, 75, 69, 78])
        ),
      ],
    });
  }
  if (!accounts.commissionTokenAccount.value) {
    accounts.commissionTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([67, 79, 77, 77, 73, 83, 83, 73, 79, 78])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.rewardTokenMint),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.commissionTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeTokenProgram),
      getAccountMeta(accounts.rewardTokenProgram),
    ],
    programAddress,
    data: getCreateStakePoolInstructionDataEncoder().encode(
      args as CreateStakePoolInstructionDataArgs
    ),
  } as CreateStakePoolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram,
    TAccountRewardTokenProgram
  >;

  return instruction;
}

export type CreateStakePoolInput<
  TAccountStakePool extends string = string,
  TAccountAuthority extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountRewardTokenMint extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountCommissionTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeTokenProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
> = {
  stakePool: TransactionSigner<TAccountStakePool>;
  authority: TransactionSigner<TAccountAuthority>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  rewardTokenMint: Address<TAccountRewardTokenMint>;
  poolWallet: Address<TAccountPoolWallet>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  rewardTokenAccount: Address<TAccountRewardTokenAccount>;
  commissionTokenAccount: Address<TAccountCommissionTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeTokenProgram: Address<TAccountStakeTokenProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  nftCollection: CreateStakePoolInstructionDataArgs['nftCollection'];
  minStakeAmount: CreateStakePoolInstructionDataArgs['minStakeAmount'];
  maxStakeAmount: CreateStakePoolInstructionDataArgs['maxStakeAmount'];
  minLocktime: CreateStakePoolInstructionDataArgs['minLocktime'];
  maxLocktime: CreateStakePoolInstructionDataArgs['maxLocktime'];
  commission: CreateStakePoolInstructionDataArgs['commission'];
};

export function getCreateStakePoolInstruction<
  TAccountStakePool extends string,
  TAccountAuthority extends string,
  TAccountStakeTokenMint extends string,
  TAccountRewardTokenMint extends string,
  TAccountPoolWallet extends string,
  TAccountStakeTokenAccount extends string,
  TAccountRewardTokenAccount extends string,
  TAccountCommissionTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountStakeTokenProgram extends string,
  TAccountRewardTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CreateStakePoolInput<
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram,
    TAccountRewardTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateStakePoolInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountAuthority,
  TAccountStakeTokenMint,
  TAccountRewardTokenMint,
  TAccountPoolWallet,
  TAccountStakeTokenAccount,
  TAccountRewardTokenAccount,
  TAccountCommissionTokenAccount,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountStakeTokenProgram,
  TAccountRewardTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    rewardTokenMint: {
      value: input.rewardTokenMint ?? null,
      isWritable: false,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: false,
    },
    commissionTokenAccount: {
      value: input.commissionTokenAccount ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeTokenProgram: {
      value: input.stakeTokenProgram ?? null,
      isWritable: false,
    },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.rewardTokenMint),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.commissionTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeTokenProgram),
      getAccountMeta(accounts.rewardTokenProgram),
    ],
    programAddress,
    data: getCreateStakePoolInstructionDataEncoder().encode(
      args as CreateStakePoolInstructionDataArgs
    ),
  } as CreateStakePoolInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram,
    TAccountRewardTokenProgram
  >;

  return instruction;
}

export type ParsedCreateStakePoolInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    authority: TAccountMetas[1];
    stakeTokenMint: TAccountMetas[2];
    rewardTokenMint: TAccountMetas[3];
    poolWallet: TAccountMetas[4];
    stakeTokenAccount: TAccountMetas[5];
    rewardTokenAccount: TAccountMetas[6];
    commissionTokenAccount: TAccountMetas[7];
    payer: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    stakeTokenProgram: TAccountMetas[10];
    rewardTokenProgram: TAccountMetas[11];
  };
  data: CreateStakePoolInstructionData;
};

export function parseCreateStakePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateStakePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      authority: getNextAccount(),
      stakeTokenMint: getNextAccount(),
      rewardTokenMint: getNextAccount(),
      poolWallet: getNextAccount(),
      stakeTokenAccount: getNextAccount(),
      rewardTokenAccount: getNextAccount(),
      commissionTokenAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeTokenProgram: getNextAccount(),
      rewardTokenProgram: getNextAccount(),
    },
    data: getCreateStakePoolInstructionDataDecoder().decode(instruction.data),
  };
}
