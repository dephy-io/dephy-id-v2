/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUnitDecoder,
  getUnitEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';

export type BaseUpdateAuthority =
  | { __kind: 'None' }
  | { __kind: 'Address'; fields: readonly [Address] }
  | { __kind: 'Collection'; fields: readonly [Address] };

export type BaseUpdateAuthorityArgs = BaseUpdateAuthority;

export function getBaseUpdateAuthorityEncoder(): Encoder<BaseUpdateAuthorityArgs> {
  return getDiscriminatedUnionEncoder([
    ['None', getUnitEncoder()],
    [
      'Address',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
    [
      'Collection',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
  ]);
}

export function getBaseUpdateAuthorityDecoder(): Decoder<BaseUpdateAuthority> {
  return getDiscriminatedUnionDecoder([
    ['None', getUnitDecoder()],
    [
      'Address',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
    [
      'Collection',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
  ]);
}

export function getBaseUpdateAuthorityCodec(): Codec<
  BaseUpdateAuthorityArgs,
  BaseUpdateAuthority
> {
  return combineCodec(
    getBaseUpdateAuthorityEncoder(),
    getBaseUpdateAuthorityDecoder()
  );
}

// Data Enum Helpers.
export function baseUpdateAuthority(
  kind: 'None'
): GetDiscriminatedUnionVariant<BaseUpdateAuthorityArgs, '__kind', 'None'>;
export function baseUpdateAuthority(
  kind: 'Address',
  data: GetDiscriminatedUnionVariantContent<
    BaseUpdateAuthorityArgs,
    '__kind',
    'Address'
  >['fields']
): GetDiscriminatedUnionVariant<BaseUpdateAuthorityArgs, '__kind', 'Address'>;
export function baseUpdateAuthority(
  kind: 'Collection',
  data: GetDiscriminatedUnionVariantContent<
    BaseUpdateAuthorityArgs,
    '__kind',
    'Collection'
  >['fields']
): GetDiscriminatedUnionVariant<
  BaseUpdateAuthorityArgs,
  '__kind',
  'Collection'
>;
export function baseUpdateAuthority<
  K extends BaseUpdateAuthorityArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBaseUpdateAuthority<K extends BaseUpdateAuthority['__kind']>(
  kind: K,
  value: BaseUpdateAuthority
): value is BaseUpdateAuthority & { __kind: K } {
  return value.__kind === kind;
}
