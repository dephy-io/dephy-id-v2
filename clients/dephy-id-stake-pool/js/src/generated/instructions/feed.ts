/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const FEED_DISCRIMINATOR = new Uint8Array([
  46, 213, 237, 176, 190, 113, 182, 94,
]);

export function getFeedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(FEED_DISCRIMINATOR);
}

export type FeedInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountRewardTokenMint extends string | IAccountMeta<string> = string,
  TAccountFeeder extends string | IAccountMeta<string> = string,
  TAccountRewardTokenAccount extends string | IAccountMeta<string> = string,
  TAccountFeederRewardTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountCommissionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountRewardTokenMint extends string
        ? ReadonlyAccount<TAccountRewardTokenMint>
        : TAccountRewardTokenMint,
      TAccountFeeder extends string
        ? ReadonlySignerAccount<TAccountFeeder> &
            IAccountSignerMeta<TAccountFeeder>
        : TAccountFeeder,
      TAccountRewardTokenAccount extends string
        ? WritableAccount<TAccountRewardTokenAccount>
        : TAccountRewardTokenAccount,
      TAccountFeederRewardTokenAccount extends string
        ? WritableAccount<TAccountFeederRewardTokenAccount>
        : TAccountFeederRewardTokenAccount,
      TAccountCommissionTokenAccount extends string
        ? WritableAccount<TAccountCommissionTokenAccount>
        : TAccountCommissionTokenAccount,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type FeedInstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardAmount: bigint;
};

export type FeedInstructionDataArgs = { rewardAmount: number | bigint };

export function getFeedInstructionDataEncoder(): Encoder<FeedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rewardAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: FEED_DISCRIMINATOR })
  );
}

export function getFeedInstructionDataDecoder(): Decoder<FeedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rewardAmount', getU64Decoder()],
  ]);
}

export function getFeedInstructionDataCodec(): Codec<
  FeedInstructionDataArgs,
  FeedInstructionData
> {
  return combineCodec(
    getFeedInstructionDataEncoder(),
    getFeedInstructionDataDecoder()
  );
}

export type FeedAsyncInput<
  TAccountStakePool extends string = string,
  TAccountRewardTokenMint extends string = string,
  TAccountFeeder extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountFeederRewardTokenAccount extends string = string,
  TAccountCommissionTokenAccount extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  rewardTokenMint: Address<TAccountRewardTokenMint>;
  feeder: TransactionSigner<TAccountFeeder>;
  rewardTokenAccount: Address<TAccountRewardTokenAccount>;
  feederRewardTokenAccount: Address<TAccountFeederRewardTokenAccount>;
  commissionTokenAccount: Address<TAccountCommissionTokenAccount>;
  poolWallet?: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rewardAmount: FeedInstructionDataArgs['rewardAmount'];
};

export async function getFeedInstructionAsync<
  TAccountStakePool extends string,
  TAccountRewardTokenMint extends string,
  TAccountFeeder extends string,
  TAccountRewardTokenAccount extends string,
  TAccountFeederRewardTokenAccount extends string,
  TAccountCommissionTokenAccount extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: FeedAsyncInput<
    TAccountStakePool,
    TAccountRewardTokenMint,
    TAccountFeeder,
    TAccountRewardTokenAccount,
    TAccountFeederRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  FeedInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountRewardTokenMint,
    TAccountFeeder,
    TAccountRewardTokenAccount,
    TAccountFeederRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    rewardTokenMint: {
      value: input.rewardTokenMint ?? null,
      isWritable: false,
    },
    feeder: { value: input.feeder ?? null, isWritable: false },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: true,
    },
    feederRewardTokenAccount: {
      value: input.feederRewardTokenAccount ?? null,
      isWritable: true,
    },
    commissionTokenAccount: {
      value: input.commissionTokenAccount ?? null,
      isWritable: true,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.rewardTokenMint),
      getAccountMeta(accounts.feeder),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.feederRewardTokenAccount),
      getAccountMeta(accounts.commissionTokenAccount),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getFeedInstructionDataEncoder().encode(
      args as FeedInstructionDataArgs
    ),
  } as FeedInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountRewardTokenMint,
    TAccountFeeder,
    TAccountRewardTokenAccount,
    TAccountFeederRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type FeedInput<
  TAccountStakePool extends string = string,
  TAccountRewardTokenMint extends string = string,
  TAccountFeeder extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountFeederRewardTokenAccount extends string = string,
  TAccountCommissionTokenAccount extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  rewardTokenMint: Address<TAccountRewardTokenMint>;
  feeder: TransactionSigner<TAccountFeeder>;
  rewardTokenAccount: Address<TAccountRewardTokenAccount>;
  feederRewardTokenAccount: Address<TAccountFeederRewardTokenAccount>;
  commissionTokenAccount: Address<TAccountCommissionTokenAccount>;
  poolWallet: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rewardAmount: FeedInstructionDataArgs['rewardAmount'];
};

export function getFeedInstruction<
  TAccountStakePool extends string,
  TAccountRewardTokenMint extends string,
  TAccountFeeder extends string,
  TAccountRewardTokenAccount extends string,
  TAccountFeederRewardTokenAccount extends string,
  TAccountCommissionTokenAccount extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: FeedInput<
    TAccountStakePool,
    TAccountRewardTokenMint,
    TAccountFeeder,
    TAccountRewardTokenAccount,
    TAccountFeederRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): FeedInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountRewardTokenMint,
  TAccountFeeder,
  TAccountRewardTokenAccount,
  TAccountFeederRewardTokenAccount,
  TAccountCommissionTokenAccount,
  TAccountPoolWallet,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    rewardTokenMint: {
      value: input.rewardTokenMint ?? null,
      isWritable: false,
    },
    feeder: { value: input.feeder ?? null, isWritable: false },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: true,
    },
    feederRewardTokenAccount: {
      value: input.feederRewardTokenAccount ?? null,
      isWritable: true,
    },
    commissionTokenAccount: {
      value: input.commissionTokenAccount ?? null,
      isWritable: true,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.rewardTokenMint),
      getAccountMeta(accounts.feeder),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.feederRewardTokenAccount),
      getAccountMeta(accounts.commissionTokenAccount),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getFeedInstructionDataEncoder().encode(
      args as FeedInstructionDataArgs
    ),
  } as FeedInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountRewardTokenMint,
    TAccountFeeder,
    TAccountRewardTokenAccount,
    TAccountFeederRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedFeedInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    rewardTokenMint: TAccountMetas[1];
    feeder: TAccountMetas[2];
    rewardTokenAccount: TAccountMetas[3];
    feederRewardTokenAccount: TAccountMetas[4];
    commissionTokenAccount: TAccountMetas[5];
    poolWallet: TAccountMetas[6];
    payer: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
  };
  data: FeedInstructionData;
};

export function parseFeedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedFeedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      rewardTokenMint: getNextAccount(),
      feeder: getNextAccount(),
      rewardTokenAccount: getNextAccount(),
      feederRewardTokenAccount: getNextAccount(),
      commissionTokenAccount: getNextAccount(),
      poolWallet: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getFeedInstructionDataDecoder().decode(instruction.data),
  };
}
