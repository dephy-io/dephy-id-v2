/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';

/** InvalidMplCoreProgram: Invalid mpl-core program */
export const DEPHY_ID_ERROR__INVALID_MPL_CORE_PROGRAM = 0x1770; // 6000
/** InvalidProductAccount: Product account is not a valid mpl-core collection */
export const DEPHY_ID_ERROR__INVALID_PRODUCT_ACCOUNT = 0x1771; // 6001
/** InvalidAuthority: Invalid authority */
export const DEPHY_ID_ERROR__INVALID_AUTHORITY = 0x1772; // 6002
/** ProductAddressMismatch: Product address not match */
export const DEPHY_ID_ERROR__PRODUCT_ADDRESS_MISMATCH = 0x1773; // 6003
/** TransactionExpired: Transaction expired */
export const DEPHY_ID_ERROR__TRANSACTION_EXPIRED = 0x1774; // 6004

export type DephyIdError =
  | typeof DEPHY_ID_ERROR__INVALID_AUTHORITY
  | typeof DEPHY_ID_ERROR__INVALID_MPL_CORE_PROGRAM
  | typeof DEPHY_ID_ERROR__INVALID_PRODUCT_ACCOUNT
  | typeof DEPHY_ID_ERROR__PRODUCT_ADDRESS_MISMATCH
  | typeof DEPHY_ID_ERROR__TRANSACTION_EXPIRED;

let dephyIdErrorMessages: Record<DephyIdError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  dephyIdErrorMessages = {
    [DEPHY_ID_ERROR__INVALID_AUTHORITY]: `Invalid authority`,
    [DEPHY_ID_ERROR__INVALID_MPL_CORE_PROGRAM]: `Invalid mpl-core program`,
    [DEPHY_ID_ERROR__INVALID_PRODUCT_ACCOUNT]: `Product account is not a valid mpl-core collection`,
    [DEPHY_ID_ERROR__PRODUCT_ADDRESS_MISMATCH]: `Product address not match`,
    [DEPHY_ID_ERROR__TRANSACTION_EXPIRED]: `Transaction expired`,
  };
}

export function getDephyIdErrorMessage(code: DephyIdError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (dephyIdErrorMessages as Record<DephyIdError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isDephyIdError<TProgramErrorCode extends DephyIdError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    DEPHY_ID_PROGRAM_ADDRESS,
    code
  );
}
