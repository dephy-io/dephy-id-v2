/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PRODUCT_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  244, 140, 143, 108, 240, 97, 155, 231,
]);

export function getProductAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PRODUCT_ACCOUNT_DISCRIMINATOR
  );
}

export type ProductAccount = {
  discriminator: ReadonlyUint8Array;
  vendor: Address;
  collection: Address;
};

export type ProductAccountArgs = { vendor: Address; collection: Address };

export function getProductAccountEncoder(): Encoder<ProductAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['vendor', getAddressEncoder()],
      ['collection', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PRODUCT_ACCOUNT_DISCRIMINATOR })
  );
}

export function getProductAccountDecoder(): Decoder<ProductAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['vendor', getAddressDecoder()],
    ['collection', getAddressDecoder()],
  ]);
}

export function getProductAccountCodec(): Codec<
  ProductAccountArgs,
  ProductAccount
> {
  return combineCodec(getProductAccountEncoder(), getProductAccountDecoder());
}

export function decodeProductAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProductAccount, TAddress>;
export function decodeProductAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProductAccount, TAddress>;
export function decodeProductAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ProductAccount, TAddress> | MaybeAccount<ProductAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProductAccountDecoder()
  );
}

export async function fetchProductAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProductAccount, TAddress>> {
  const maybeAccount = await fetchMaybeProductAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProductAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProductAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProductAccount(maybeAccount);
}

export async function fetchAllProductAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProductAccount>[]> {
  const maybeAccounts = await fetchAllMaybeProductAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProductAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProductAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeProductAccount(maybeAccount)
  );
}

export function getProductAccountSize(): number {
  return 72;
}
