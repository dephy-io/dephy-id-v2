/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getBaseExtraAccountDecoder,
  getBaseExtraAccountEncoder,
  getExternalCheckResultDecoder,
  getExternalCheckResultEncoder,
  getExternalPluginAdapterSchemaDecoder,
  getExternalPluginAdapterSchemaEncoder,
  getHookableLifecycleEventDecoder,
  getHookableLifecycleEventEncoder,
  type BaseExtraAccount,
  type BaseExtraAccountArgs,
  type ExternalCheckResult,
  type ExternalCheckResultArgs,
  type ExternalPluginAdapterSchema,
  type ExternalPluginAdapterSchemaArgs,
  type HookableLifecycleEvent,
  type HookableLifecycleEventArgs,
} from '.';

export type BaseLinkedLifecycleHookUpdateInfo = {
  lifecycleChecks: Option<
    Array<readonly [HookableLifecycleEvent, ExternalCheckResult]>
  >;
  extraAccounts: Option<Array<BaseExtraAccount>>;
  schema: Option<ExternalPluginAdapterSchema>;
};

export type BaseLinkedLifecycleHookUpdateInfoArgs = {
  lifecycleChecks: OptionOrNullable<
    Array<readonly [HookableLifecycleEventArgs, ExternalCheckResultArgs]>
  >;
  extraAccounts: OptionOrNullable<Array<BaseExtraAccountArgs>>;
  schema: OptionOrNullable<ExternalPluginAdapterSchemaArgs>;
};

export function getBaseLinkedLifecycleHookUpdateInfoEncoder(): Encoder<BaseLinkedLifecycleHookUpdateInfoArgs> {
  return getStructEncoder([
    [
      'lifecycleChecks',
      getOptionEncoder(
        getArrayEncoder(
          getTupleEncoder([
            getHookableLifecycleEventEncoder(),
            getExternalCheckResultEncoder(),
          ])
        )
      ),
    ],
    [
      'extraAccounts',
      getOptionEncoder(getArrayEncoder(getBaseExtraAccountEncoder())),
    ],
    ['schema', getOptionEncoder(getExternalPluginAdapterSchemaEncoder())],
  ]);
}

export function getBaseLinkedLifecycleHookUpdateInfoDecoder(): Decoder<BaseLinkedLifecycleHookUpdateInfo> {
  return getStructDecoder([
    [
      'lifecycleChecks',
      getOptionDecoder(
        getArrayDecoder(
          getTupleDecoder([
            getHookableLifecycleEventDecoder(),
            getExternalCheckResultDecoder(),
          ])
        )
      ),
    ],
    [
      'extraAccounts',
      getOptionDecoder(getArrayDecoder(getBaseExtraAccountDecoder())),
    ],
    ['schema', getOptionDecoder(getExternalPluginAdapterSchemaDecoder())],
  ]);
}

export function getBaseLinkedLifecycleHookUpdateInfoCodec(): Codec<
  BaseLinkedLifecycleHookUpdateInfoArgs,
  BaseLinkedLifecycleHookUpdateInfo
> {
  return combineCodec(
    getBaseLinkedLifecycleHookUpdateInfoEncoder(),
    getBaseLinkedLifecycleHookUpdateInfoDecoder()
  );
}
