/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REALLOCATE_STAKE_DISCRIMINATOR = new Uint8Array([
  206, 203, 151, 19, 70, 177, 124, 121,
]);

export function getReallocateStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REALLOCATE_STAKE_DISCRIMINATOR
  );
}

export type ReallocateStakeInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountFromStake extends string | IAccountMeta<string> = string,
  TAccountToStake extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountFromStake extends string
        ? WritableAccount<TAccountFromStake>
        : TAccountFromStake,
      TAccountToStake extends string
        ? WritableAccount<TAccountToStake>
        : TAccountToStake,
      ...TRemainingAccounts,
    ]
  >;

export type ReallocateStakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type ReallocateStakeInstructionDataArgs = { amount: number | bigint };

export function getReallocateStakeInstructionDataEncoder(): Encoder<ReallocateStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REALLOCATE_STAKE_DISCRIMINATOR })
  );
}

export function getReallocateStakeInstructionDataDecoder(): Decoder<ReallocateStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getReallocateStakeInstructionDataCodec(): Codec<
  ReallocateStakeInstructionDataArgs,
  ReallocateStakeInstructionData
> {
  return combineCodec(
    getReallocateStakeInstructionDataEncoder(),
    getReallocateStakeInstructionDataDecoder()
  );
}

export type ReallocateStakeInput<
  TAccountStakePool extends string = string,
  TAccountAuthority extends string = string,
  TAccountFromStake extends string = string,
  TAccountToStake extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  authority: TransactionSigner<TAccountAuthority>;
  fromStake?: Address<TAccountFromStake>;
  toStake?: Address<TAccountToStake>;
  amount: ReallocateStakeInstructionDataArgs['amount'];
};

export function getReallocateStakeInstruction<
  TAccountStakePool extends string,
  TAccountAuthority extends string,
  TAccountFromStake extends string,
  TAccountToStake extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: ReallocateStakeInput<
    TAccountStakePool,
    TAccountAuthority,
    TAccountFromStake,
    TAccountToStake
  >,
  config?: { programAddress?: TProgramAddress }
): ReallocateStakeInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountAuthority,
  TAccountFromStake,
  TAccountToStake
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    fromStake: { value: input.fromStake ?? null, isWritable: true },
    toStake: { value: input.toStake ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.fromStake),
      getAccountMeta(accounts.toStake),
    ],
    programAddress,
    data: getReallocateStakeInstructionDataEncoder().encode(
      args as ReallocateStakeInstructionDataArgs
    ),
  } as ReallocateStakeInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountAuthority,
    TAccountFromStake,
    TAccountToStake
  >;

  return instruction;
}

export type ParsedReallocateStakeInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    authority: TAccountMetas[1];
    fromStake?: TAccountMetas[2] | undefined;
    toStake?: TAccountMetas[3] | undefined;
  };
  data: ReallocateStakeInstructionData;
};

export function parseReallocateStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedReallocateStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      authority: getNextAccount(),
      fromStake: getNextOptionalAccount(),
      toStake: getNextOptionalAccount(),
    },
    data: getReallocateStakeInstructionDataDecoder().decode(instruction.data),
  };
}
