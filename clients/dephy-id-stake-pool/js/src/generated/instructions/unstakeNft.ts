/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UNSTAKE_NFT_DISCRIMINATOR = new Uint8Array([
  17, 182, 24, 211, 101, 138, 50, 163,
]);

export function getUnstakeNftDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UNSTAKE_NFT_DISCRIMINATOR);
}

export type UnstakeNftInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountNftStake extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountStakeAuthority extends string | AccountMeta<string> = string,
  TAccountMplCoreCollection extends string | AccountMeta<string> = string,
  TAccountMplCoreAsset extends string | AccountMeta<string> = string,
  TAccountPoolWallet extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountMplCoreProgram extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountNftStake extends string
        ? WritableAccount<TAccountNftStake>
        : TAccountNftStake,
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            AccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      TAccountMplCoreCollection extends string
        ? WritableAccount<TAccountMplCoreCollection>
        : TAccountMplCoreCollection,
      TAccountMplCoreAsset extends string
        ? WritableAccount<TAccountMplCoreAsset>
        : TAccountMplCoreAsset,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UnstakeNftInstructionData = { discriminator: ReadonlyUint8Array };

export type UnstakeNftInstructionDataArgs = {};

export function getUnstakeNftInstructionDataEncoder(): FixedSizeEncoder<UnstakeNftInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: UNSTAKE_NFT_DISCRIMINATOR })
  );
}

export function getUnstakeNftInstructionDataDecoder(): FixedSizeDecoder<UnstakeNftInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUnstakeNftInstructionDataCodec(): FixedSizeCodec<
  UnstakeNftInstructionDataArgs,
  UnstakeNftInstructionData
> {
  return combineCodec(
    getUnstakeNftInstructionDataEncoder(),
    getUnstakeNftInstructionDataDecoder()
  );
}

export type UnstakeNftAsyncInput<
  TAccountNftStake extends string = string,
  TAccountStakePool extends string = string,
  TAccountStakeAuthority extends string = string,
  TAccountMplCoreCollection extends string = string,
  TAccountMplCoreAsset extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMplCoreProgram extends string = string,
> = {
  nftStake: Address<TAccountNftStake>;
  stakePool: Address<TAccountStakePool>;
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  mplCoreCollection: Address<TAccountMplCoreCollection>;
  mplCoreAsset: Address<TAccountMplCoreAsset>;
  poolWallet?: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
};

export async function getUnstakeNftInstructionAsync<
  TAccountNftStake extends string,
  TAccountStakePool extends string,
  TAccountStakeAuthority extends string,
  TAccountMplCoreCollection extends string,
  TAccountMplCoreAsset extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountMplCoreProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UnstakeNftAsyncInput<
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountMplCoreCollection,
    TAccountMplCoreAsset,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UnstakeNftInstruction<
    TProgramAddress,
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountMplCoreCollection,
    TAccountMplCoreAsset,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
    mplCoreCollection: {
      value: input.mplCoreCollection ?? null,
      isWritable: true,
    },
    mplCoreAsset: { value: input.mplCoreAsset ?? null, isWritable: true },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakeAuthority),
      getAccountMeta(accounts.mplCoreCollection),
      getAccountMeta(accounts.mplCoreAsset),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.mplCoreProgram),
    ],
    data: getUnstakeNftInstructionDataEncoder().encode({}),
    programAddress,
  } as UnstakeNftInstruction<
    TProgramAddress,
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountMplCoreCollection,
    TAccountMplCoreAsset,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >);
}

export type UnstakeNftInput<
  TAccountNftStake extends string = string,
  TAccountStakePool extends string = string,
  TAccountStakeAuthority extends string = string,
  TAccountMplCoreCollection extends string = string,
  TAccountMplCoreAsset extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMplCoreProgram extends string = string,
> = {
  nftStake: Address<TAccountNftStake>;
  stakePool: Address<TAccountStakePool>;
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  mplCoreCollection: Address<TAccountMplCoreCollection>;
  mplCoreAsset: Address<TAccountMplCoreAsset>;
  poolWallet: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
};

export function getUnstakeNftInstruction<
  TAccountNftStake extends string,
  TAccountStakePool extends string,
  TAccountStakeAuthority extends string,
  TAccountMplCoreCollection extends string,
  TAccountMplCoreAsset extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountMplCoreProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: UnstakeNftInput<
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountMplCoreCollection,
    TAccountMplCoreAsset,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UnstakeNftInstruction<
  TProgramAddress,
  TAccountNftStake,
  TAccountStakePool,
  TAccountStakeAuthority,
  TAccountMplCoreCollection,
  TAccountMplCoreAsset,
  TAccountPoolWallet,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountMplCoreProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
    mplCoreCollection: {
      value: input.mplCoreCollection ?? null,
      isWritable: true,
    },
    mplCoreAsset: { value: input.mplCoreAsset ?? null, isWritable: true },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakeAuthority),
      getAccountMeta(accounts.mplCoreCollection),
      getAccountMeta(accounts.mplCoreAsset),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.mplCoreProgram),
    ],
    data: getUnstakeNftInstructionDataEncoder().encode({}),
    programAddress,
  } as UnstakeNftInstruction<
    TProgramAddress,
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountMplCoreCollection,
    TAccountMplCoreAsset,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >);
}

export type ParsedUnstakeNftInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    nftStake: TAccountMetas[0];
    stakePool: TAccountMetas[1];
    stakeAuthority: TAccountMetas[2];
    mplCoreCollection: TAccountMetas[3];
    mplCoreAsset: TAccountMetas[4];
    poolWallet: TAccountMetas[5];
    payer: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    mplCoreProgram: TAccountMetas[8];
  };
  data: UnstakeNftInstructionData;
};

export function parseUnstakeNftInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUnstakeNftInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nftStake: getNextAccount(),
      stakePool: getNextAccount(),
      stakeAuthority: getNextAccount(),
      mplCoreCollection: getNextAccount(),
      mplCoreAsset: getNextAccount(),
      poolWallet: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      mplCoreProgram: getNextAccount(),
    },
    data: getUnstakeNftInstructionDataDecoder().decode(instruction.data),
  };
}
