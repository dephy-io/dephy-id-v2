/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findAssetSignerPda } from '../pdas';
import { MPL_CORE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const EXECUTE_V1_DISCRIMINATOR = 31;

export function getExecuteV1DiscriminatorBytes() {
  return getU8Encoder().encode(EXECUTE_V1_DISCRIMINATOR);
}

export type ExecuteV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountAsset extends string | AccountMeta<string> = string,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountAssetSigner extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountProgramId extends
    | string
    | AccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAsset extends string
        ? WritableAccount<TAccountAsset>
        : TAccountAsset,
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountAssetSigner extends string
        ? ReadonlyAccount<TAccountAssetSigner>
        : TAccountAssetSigner,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteV1InstructionData = {
  discriminator: number;
  instructionData: ReadonlyUint8Array;
};

export type ExecuteV1InstructionDataArgs = {
  instructionData: ReadonlyUint8Array;
};

export function getExecuteV1InstructionDataEncoder(): Encoder<ExecuteV1InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      [
        'instructionData',
        addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: EXECUTE_V1_DISCRIMINATOR })
  );
}

export function getExecuteV1InstructionDataDecoder(): Decoder<ExecuteV1InstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    [
      'instructionData',
      addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
    ],
  ]);
}

export function getExecuteV1InstructionDataCodec(): Codec<
  ExecuteV1InstructionDataArgs,
  ExecuteV1InstructionData
> {
  return combineCodec(
    getExecuteV1InstructionDataEncoder(),
    getExecuteV1InstructionDataDecoder()
  );
}

export type ExecuteV1AsyncInput<
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountAssetSigner extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProgramId extends string = string,
> = {
  /** The address of the asset */
  asset: Address<TAccountAsset>;
  /** The collection to which the asset belongs */
  collection?: Address<TAccountCollection>;
  /** The signing PDA for the asset */
  assetSigner?: Address<TAccountAssetSigner>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The owner or delegate of the asset */
  authority?: TransactionSigner<TAccountAuthority>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The program id of the instruction */
  programId?: Address<TAccountProgramId>;
  instructionData: ExecuteV1InstructionDataArgs['instructionData'];
};

export async function getExecuteV1InstructionAsync<
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountAssetSigner extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountProgramId extends string,
  TProgramAddress extends Address = typeof MPL_CORE_PROGRAM_ADDRESS,
>(
  input: ExecuteV1AsyncInput<
    TAccountAsset,
    TAccountCollection,
    TAccountAssetSigner,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountProgramId
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ExecuteV1Instruction<
    TProgramAddress,
    TAccountAsset,
    TAccountCollection,
    TAccountAssetSigner,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountProgramId
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MPL_CORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    assetSigner: { value: input.assetSigner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    programId: { value: input.programId ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.assetSigner.value) {
    accounts.assetSigner.value = await findAssetSignerPda({
      asset: expectAddress(accounts.asset.value),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.assetSigner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.programId),
    ],
    data: getExecuteV1InstructionDataEncoder().encode(
      args as ExecuteV1InstructionDataArgs
    ),
    programAddress,
  } as ExecuteV1Instruction<
    TProgramAddress,
    TAccountAsset,
    TAccountCollection,
    TAccountAssetSigner,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountProgramId
  >);
}

export type ExecuteV1Input<
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountAssetSigner extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProgramId extends string = string,
> = {
  /** The address of the asset */
  asset: Address<TAccountAsset>;
  /** The collection to which the asset belongs */
  collection?: Address<TAccountCollection>;
  /** The signing PDA for the asset */
  assetSigner: Address<TAccountAssetSigner>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The owner or delegate of the asset */
  authority?: TransactionSigner<TAccountAuthority>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The program id of the instruction */
  programId?: Address<TAccountProgramId>;
  instructionData: ExecuteV1InstructionDataArgs['instructionData'];
};

export function getExecuteV1Instruction<
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountAssetSigner extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountProgramId extends string,
  TProgramAddress extends Address = typeof MPL_CORE_PROGRAM_ADDRESS,
>(
  input: ExecuteV1Input<
    TAccountAsset,
    TAccountCollection,
    TAccountAssetSigner,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountProgramId
  >,
  config?: { programAddress?: TProgramAddress }
): ExecuteV1Instruction<
  TProgramAddress,
  TAccountAsset,
  TAccountCollection,
  TAccountAssetSigner,
  TAccountPayer,
  TAccountAuthority,
  TAccountSystemProgram,
  TAccountProgramId
> {
  // Program address.
  const programAddress = config?.programAddress ?? MPL_CORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    assetSigner: { value: input.assetSigner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    programId: { value: input.programId ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.assetSigner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.programId),
    ],
    data: getExecuteV1InstructionDataEncoder().encode(
      args as ExecuteV1InstructionDataArgs
    ),
    programAddress,
  } as ExecuteV1Instruction<
    TProgramAddress,
    TAccountAsset,
    TAccountCollection,
    TAccountAssetSigner,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountProgramId
  >);
}

export type ParsedExecuteV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The address of the asset */
    asset: TAccountMetas[0];
    /** The collection to which the asset belongs */
    collection?: TAccountMetas[1] | undefined;
    /** The signing PDA for the asset */
    assetSigner: TAccountMetas[2];
    /** The account paying for the storage fees */
    payer: TAccountMetas[3];
    /** The owner or delegate of the asset */
    authority?: TAccountMetas[4] | undefined;
    /** The system program */
    systemProgram: TAccountMetas[5];
    /** The program id of the instruction */
    programId: TAccountMetas[6];
  };
  data: ExecuteV1InstructionData;
};

export function parseExecuteV1Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedExecuteV1Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_CORE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      asset: getNextAccount(),
      collection: getNextOptionalAccount(),
      assetSigner: getNextAccount(),
      payer: getNextAccount(),
      authority: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      programId: getNextAccount(),
    },
    data: getExecuteV1InstructionDataDecoder().decode(instruction.data),
  };
}
