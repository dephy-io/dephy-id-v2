/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_MINT_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  103, 51, 57, 197, 223, 22, 44, 142,
]);

export function getUpdateMintAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_MINT_AUTHORITY_DISCRIMINATOR
  );
}

export type UpdateMintAuthorityInstruction<
  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,
  TAccountProductAccount extends string | IAccountMeta<string> = string,
  TAccountVendor extends string | IAccountMeta<string> = string,
  TAccountMintAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProductAccount extends string
        ? WritableAccount<TAccountProductAccount>
        : TAccountProductAccount,
      TAccountVendor extends string
        ? ReadonlySignerAccount<TAccountVendor> &
            IAccountSignerMeta<TAccountVendor>
        : TAccountVendor,
      TAccountMintAuthority extends string
        ? ReadonlyAccount<TAccountMintAuthority>
        : TAccountMintAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMintAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type UpdateMintAuthorityInstructionDataArgs = {};

export function getUpdateMintAuthorityInstructionDataEncoder(): Encoder<UpdateMintAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_MINT_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getUpdateMintAuthorityInstructionDataDecoder(): Decoder<UpdateMintAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdateMintAuthorityInstructionDataCodec(): Codec<
  UpdateMintAuthorityInstructionDataArgs,
  UpdateMintAuthorityInstructionData
> {
  return combineCodec(
    getUpdateMintAuthorityInstructionDataEncoder(),
    getUpdateMintAuthorityInstructionDataDecoder()
  );
}

export type UpdateMintAuthorityInput<
  TAccountProductAccount extends string = string,
  TAccountVendor extends string = string,
  TAccountMintAuthority extends string = string,
> = {
  productAccount: Address<TAccountProductAccount>;
  vendor: TransactionSigner<TAccountVendor>;
  mintAuthority: Address<TAccountMintAuthority>;
};

export function getUpdateMintAuthorityInstruction<
  TAccountProductAccount extends string,
  TAccountVendor extends string,
  TAccountMintAuthority extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS,
>(
  input: UpdateMintAuthorityInput<
    TAccountProductAccount,
    TAccountVendor,
    TAccountMintAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateMintAuthorityInstruction<
  TProgramAddress,
  TAccountProductAccount,
  TAccountVendor,
  TAccountMintAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? DEPHY_ID_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    productAccount: { value: input.productAccount ?? null, isWritable: true },
    vendor: { value: input.vendor ?? null, isWritable: false },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.productAccount),
      getAccountMeta(accounts.vendor),
      getAccountMeta(accounts.mintAuthority),
    ],
    programAddress,
    data: getUpdateMintAuthorityInstructionDataEncoder().encode({}),
  } as UpdateMintAuthorityInstruction<
    TProgramAddress,
    TAccountProductAccount,
    TAccountVendor,
    TAccountMintAuthority
  >;

  return instruction;
}

export type ParsedUpdateMintAuthorityInstruction<
  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    productAccount: TAccountMetas[0];
    vendor: TAccountMetas[1];
    mintAuthority: TAccountMetas[2];
  };
  data: UpdateMintAuthorityInstructionData;
};

export function parseUpdateMintAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateMintAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      productAccount: getNextAccount(),
      vendor: getNextAccount(),
      mintAuthority: getNextAccount(),
    },
    data: getUpdateMintAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
