/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAnnounceUpdateConfigInstruction,
  type ParsedApproveWithdrawInstruction,
  type ParsedCancelUpdateConfigInstruction,
  type ParsedClaimInstruction,
  type ParsedCloseNftStakeWithMplCoreInstruction,
  type ParsedConfirmUpdateConfigInstruction,
  type ParsedCreateNftStakeWithMplCoreInstruction,
  type ParsedCreateStakePoolInstruction,
  type ParsedDepositInstruction,
  type ParsedFeedInstruction,
  type ParsedGetClaimableInstruction,
  type ParsedInitializeInstruction,
  type ParsedPrepareRewardTokenAccountsInstruction,
  type ParsedReallocateStakeInstruction,
  type ParsedRedeemWithdrawInstruction,
  type ParsedRequestWithdrawInstruction,
  type ParsedWithdrawInstruction,
} from '../instructions';

export const DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS =
  'DeSTKZaWUDGLAx4FFVzMtJPSDTgWi3sccj4MACs9vj6Y' as Address<'DeSTKZaWUDGLAx4FFVzMtJPSDTgWi3sccj4MACs9vj6Y'>;

export enum DephyIdStakePoolAccount {
  AdminAccount,
  AnnouncedConfigAccount,
  NftStakeAccount,
  StakePoolAccount,
  UserStakeAccount,
  WithdrawRequestAccount,
}

export function identifyDephyIdStakePoolAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): DephyIdStakePoolAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([153, 119, 180, 178, 43, 66, 235, 148])
      ),
      0
    )
  ) {
    return DephyIdStakePoolAccount.AdminAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 17, 67, 145, 200, 140, 137, 226])
      ),
      0
    )
  ) {
    return DephyIdStakePoolAccount.AnnouncedConfigAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([109, 22, 236, 62, 96, 242, 14, 116])
      ),
      0
    )
  ) {
    return DephyIdStakePoolAccount.NftStakeAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([87, 244, 250, 124, 34, 252, 189, 44])
      ),
      0
    )
  ) {
    return DephyIdStakePoolAccount.StakePoolAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 87, 153, 81, 129, 95, 15, 213])
      ),
      0
    )
  ) {
    return DephyIdStakePoolAccount.UserStakeAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([128, 63, 205, 31, 202, 42, 218, 83])
      ),
      0
    )
  ) {
    return DephyIdStakePoolAccount.WithdrawRequestAccount;
  }
  throw new Error(
    'The provided account could not be identified as a dephyIdStakePool account.'
  );
}

export enum DephyIdStakePoolInstruction {
  AnnounceUpdateConfig,
  ApproveWithdraw,
  CancelUpdateConfig,
  Claim,
  CloseNftStakeWithMplCore,
  ConfirmUpdateConfig,
  CreateNftStakeWithMplCore,
  CreateStakePool,
  Deposit,
  Feed,
  GetClaimable,
  Initialize,
  PrepareRewardTokenAccounts,
  ReallocateStake,
  RedeemWithdraw,
  RequestWithdraw,
  Withdraw,
}

export function identifyDephyIdStakePoolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): DephyIdStakePoolInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([25, 72, 63, 45, 123, 42, 124, 197])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.AnnounceUpdateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([21, 206, 37, 159, 241, 136, 119, 153])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.ApproveWithdraw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([235, 155, 243, 161, 6, 145, 121, 173])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.CancelUpdateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([62, 198, 214, 193, 213, 159, 108, 210])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.Claim;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([162, 243, 243, 34, 70, 124, 101, 106])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.CloseNftStakeWithMplCore;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([25, 58, 1, 51, 3, 105, 99, 234])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.ConfirmUpdateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 120, 106, 151, 215, 96, 177, 37])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.CreateNftStakeWithMplCore;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([198, 175, 88, 63, 128, 43, 8, 214])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.CreateStakePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 35, 198, 137, 82, 225, 242, 182])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.Deposit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 213, 237, 176, 190, 113, 182, 94])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.Feed;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 52, 219, 251, 78, 77, 231, 124])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.GetClaimable;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 81, 196, 110, 71, 97, 184, 97])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.PrepareRewardTokenAccounts;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 203, 151, 19, 70, 177, 124, 121])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.ReallocateStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 106, 55, 85, 39, 199, 151, 142])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.RedeemWithdraw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([137, 95, 187, 96, 250, 138, 31, 182])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.RequestWithdraw;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34])
      ),
      0
    )
  ) {
    return DephyIdStakePoolInstruction.Withdraw;
  }
  throw new Error(
    'The provided instruction could not be identified as a dephyIdStakePool instruction.'
  );
}

export type ParsedDephyIdStakePoolInstruction<
  TProgram extends string = 'DeSTKZaWUDGLAx4FFVzMtJPSDTgWi3sccj4MACs9vj6Y',
> =
  | ({
      instructionType: DephyIdStakePoolInstruction.AnnounceUpdateConfig;
    } & ParsedAnnounceUpdateConfigInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.ApproveWithdraw;
    } & ParsedApproveWithdrawInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.CancelUpdateConfig;
    } & ParsedCancelUpdateConfigInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.Claim;
    } & ParsedClaimInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.CloseNftStakeWithMplCore;
    } & ParsedCloseNftStakeWithMplCoreInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.ConfirmUpdateConfig;
    } & ParsedConfirmUpdateConfigInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.CreateNftStakeWithMplCore;
    } & ParsedCreateNftStakeWithMplCoreInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.CreateStakePool;
    } & ParsedCreateStakePoolInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.Feed;
    } & ParsedFeedInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.GetClaimable;
    } & ParsedGetClaimableInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.PrepareRewardTokenAccounts;
    } & ParsedPrepareRewardTokenAccountsInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.ReallocateStake;
    } & ParsedReallocateStakeInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.RedeemWithdraw;
    } & ParsedRedeemWithdrawInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.RequestWithdraw;
    } & ParsedRequestWithdrawInstruction<TProgram>)
  | ({
      instructionType: DephyIdStakePoolInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);
