/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_NFT_STAKE_WITH_MPL_CORE_DISCRIMINATOR = new Uint8Array([
  175, 120, 106, 151, 215, 96, 177, 37,
]);

export function getCreateNftStakeWithMplCoreDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_NFT_STAKE_WITH_MPL_CORE_DISCRIMINATOR
  );
}

export type CreateNftStakeWithMplCoreInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountNftStake extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TAccountMplCoreAsset extends string | IAccountMeta<string> = string,
  TAccountMplCoreCollection extends string | IAccountMeta<string> = string,
  TAccountStakeTokenMint extends string | IAccountMeta<string> = string,
  TAccountRewardTokenMint extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountRewardTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMplCoreProgram extends
    | string
    | IAccountMeta<string> = 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountNftStake extends string
        ? WritableAccount<TAccountNftStake>
        : TAccountNftStake,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      TAccountMplCoreAsset extends string
        ? WritableAccount<TAccountMplCoreAsset>
        : TAccountMplCoreAsset,
      TAccountMplCoreCollection extends string
        ? WritableAccount<TAccountMplCoreCollection>
        : TAccountMplCoreCollection,
      TAccountStakeTokenMint extends string
        ? ReadonlyAccount<TAccountStakeTokenMint>
        : TAccountStakeTokenMint,
      TAccountRewardTokenMint extends string
        ? ReadonlyAccount<TAccountRewardTokenMint>
        : TAccountRewardTokenMint,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountStakeTokenAccount extends string
        ? WritableAccount<TAccountStakeTokenAccount>
        : TAccountStakeTokenAccount,
      TAccountRewardTokenAccount extends string
        ? WritableAccount<TAccountRewardTokenAccount>
        : TAccountRewardTokenAccount,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMplCoreProgram extends string
        ? ReadonlyAccount<TAccountMplCoreProgram>
        : TAccountMplCoreProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateNftStakeWithMplCoreInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CreateNftStakeWithMplCoreInstructionDataArgs = {};

export function getCreateNftStakeWithMplCoreInstructionDataEncoder(): Encoder<CreateNftStakeWithMplCoreInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CREATE_NFT_STAKE_WITH_MPL_CORE_DISCRIMINATOR,
    })
  );
}

export function getCreateNftStakeWithMplCoreInstructionDataDecoder(): Decoder<CreateNftStakeWithMplCoreInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCreateNftStakeWithMplCoreInstructionDataCodec(): Codec<
  CreateNftStakeWithMplCoreInstructionDataArgs,
  CreateNftStakeWithMplCoreInstructionData
> {
  return combineCodec(
    getCreateNftStakeWithMplCoreInstructionDataEncoder(),
    getCreateNftStakeWithMplCoreInstructionDataDecoder()
  );
}

export type CreateNftStakeWithMplCoreAsyncInput<
  TAccountStakePool extends string = string,
  TAccountNftStake extends string = string,
  TAccountStakeAuthority extends string = string,
  TAccountMplCoreAsset extends string = string,
  TAccountMplCoreCollection extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountRewardTokenMint extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMplCoreProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  nftStake: Address<TAccountNftStake>;
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  mplCoreAsset: Address<TAccountMplCoreAsset>;
  mplCoreCollection: Address<TAccountMplCoreCollection>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  rewardTokenMint: Address<TAccountRewardTokenMint>;
  poolWallet?: Address<TAccountPoolWallet>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  rewardTokenAccount: Address<TAccountRewardTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
};

export async function getCreateNftStakeWithMplCoreInstructionAsync<
  TAccountStakePool extends string,
  TAccountNftStake extends string,
  TAccountStakeAuthority extends string,
  TAccountMplCoreAsset extends string,
  TAccountMplCoreCollection extends string,
  TAccountStakeTokenMint extends string,
  TAccountRewardTokenMint extends string,
  TAccountPoolWallet extends string,
  TAccountStakeTokenAccount extends string,
  TAccountRewardTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountMplCoreProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CreateNftStakeWithMplCoreAsyncInput<
    TAccountStakePool,
    TAccountNftStake,
    TAccountStakeAuthority,
    TAccountMplCoreAsset,
    TAccountMplCoreCollection,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateNftStakeWithMplCoreInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountNftStake,
    TAccountStakeAuthority,
    TAccountMplCoreAsset,
    TAccountMplCoreCollection,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
    mplCoreAsset: { value: input.mplCoreAsset ?? null, isWritable: true },
    mplCoreCollection: {
      value: input.mplCoreCollection ?? null,
      isWritable: true,
    },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    rewardTokenMint: {
      value: input.rewardTokenMint ?? null,
      isWritable: false,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.stakeAuthority),
      getAccountMeta(accounts.mplCoreAsset),
      getAccountMeta(accounts.mplCoreCollection),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.rewardTokenMint),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.mplCoreProgram),
    ],
    programAddress,
    data: getCreateNftStakeWithMplCoreInstructionDataEncoder().encode({}),
  } as CreateNftStakeWithMplCoreInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountNftStake,
    TAccountStakeAuthority,
    TAccountMplCoreAsset,
    TAccountMplCoreCollection,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >;

  return instruction;
}

export type CreateNftStakeWithMplCoreInput<
  TAccountStakePool extends string = string,
  TAccountNftStake extends string = string,
  TAccountStakeAuthority extends string = string,
  TAccountMplCoreAsset extends string = string,
  TAccountMplCoreCollection extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountRewardTokenMint extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountMplCoreProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  nftStake: Address<TAccountNftStake>;
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  mplCoreAsset: Address<TAccountMplCoreAsset>;
  mplCoreCollection: Address<TAccountMplCoreCollection>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  rewardTokenMint: Address<TAccountRewardTokenMint>;
  poolWallet: Address<TAccountPoolWallet>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  rewardTokenAccount: Address<TAccountRewardTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  mplCoreProgram?: Address<TAccountMplCoreProgram>;
};

export function getCreateNftStakeWithMplCoreInstruction<
  TAccountStakePool extends string,
  TAccountNftStake extends string,
  TAccountStakeAuthority extends string,
  TAccountMplCoreAsset extends string,
  TAccountMplCoreCollection extends string,
  TAccountStakeTokenMint extends string,
  TAccountRewardTokenMint extends string,
  TAccountPoolWallet extends string,
  TAccountStakeTokenAccount extends string,
  TAccountRewardTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountMplCoreProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CreateNftStakeWithMplCoreInput<
    TAccountStakePool,
    TAccountNftStake,
    TAccountStakeAuthority,
    TAccountMplCoreAsset,
    TAccountMplCoreCollection,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateNftStakeWithMplCoreInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountNftStake,
  TAccountStakeAuthority,
  TAccountMplCoreAsset,
  TAccountMplCoreCollection,
  TAccountStakeTokenMint,
  TAccountRewardTokenMint,
  TAccountPoolWallet,
  TAccountStakeTokenAccount,
  TAccountRewardTokenAccount,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountMplCoreProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
    mplCoreAsset: { value: input.mplCoreAsset ?? null, isWritable: true },
    mplCoreCollection: {
      value: input.mplCoreCollection ?? null,
      isWritable: true,
    },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    rewardTokenMint: {
      value: input.rewardTokenMint ?? null,
      isWritable: false,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    mplCoreProgram: { value: input.mplCoreProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.mplCoreProgram.value) {
    accounts.mplCoreProgram.value =
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d' as Address<'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.stakeAuthority),
      getAccountMeta(accounts.mplCoreAsset),
      getAccountMeta(accounts.mplCoreCollection),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.rewardTokenMint),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.mplCoreProgram),
    ],
    programAddress,
    data: getCreateNftStakeWithMplCoreInstructionDataEncoder().encode({}),
  } as CreateNftStakeWithMplCoreInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountNftStake,
    TAccountStakeAuthority,
    TAccountMplCoreAsset,
    TAccountMplCoreCollection,
    TAccountStakeTokenMint,
    TAccountRewardTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountRewardTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountMplCoreProgram
  >;

  return instruction;
}

export type ParsedCreateNftStakeWithMplCoreInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    nftStake: TAccountMetas[1];
    stakeAuthority: TAccountMetas[2];
    mplCoreAsset: TAccountMetas[3];
    mplCoreCollection: TAccountMetas[4];
    stakeTokenMint: TAccountMetas[5];
    rewardTokenMint: TAccountMetas[6];
    poolWallet: TAccountMetas[7];
    stakeTokenAccount: TAccountMetas[8];
    rewardTokenAccount: TAccountMetas[9];
    payer: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    mplCoreProgram: TAccountMetas[12];
  };
  data: CreateNftStakeWithMplCoreInstructionData;
};

export function parseCreateNftStakeWithMplCoreInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateNftStakeWithMplCoreInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      nftStake: getNextAccount(),
      stakeAuthority: getNextAccount(),
      mplCoreAsset: getNextAccount(),
      mplCoreCollection: getNextAccount(),
      stakeTokenMint: getNextAccount(),
      rewardTokenMint: getNextAccount(),
      poolWallet: getNextAccount(),
      stakeTokenAccount: getNextAccount(),
      rewardTokenAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      mplCoreProgram: getNextAccount(),
    },
    data: getCreateNftStakeWithMplCoreInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
