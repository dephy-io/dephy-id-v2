/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REDEEM_WITHDRAW_TOKEN_DISCRIMINATOR = new Uint8Array([
  94, 46, 239, 193, 99, 233, 243, 19,
]);

export function getRedeemWithdrawTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REDEEM_WITHDRAW_TOKEN_DISCRIMINATOR
  );
}

export type RedeemWithdrawTokenInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountUserStakeAccount extends string | IAccountMeta<string> = string,
  TAccountWithdrawRequest extends string | IAccountMeta<string> = string,
  TAccountStakeTokenMint extends string | IAccountMeta<string> = string,
  TAccountStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountUserStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountNftStake extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountUserStakeAccount extends string
        ? WritableAccount<TAccountUserStakeAccount>
        : TAccountUserStakeAccount,
      TAccountWithdrawRequest extends string
        ? WritableAccount<TAccountWithdrawRequest>
        : TAccountWithdrawRequest,
      TAccountStakeTokenMint extends string
        ? ReadonlyAccount<TAccountStakeTokenMint>
        : TAccountStakeTokenMint,
      TAccountStakeTokenAccount extends string
        ? WritableAccount<TAccountStakeTokenAccount>
        : TAccountStakeTokenAccount,
      TAccountUserStakeTokenAccount extends string
        ? WritableAccount<TAccountUserStakeTokenAccount>
        : TAccountUserStakeTokenAccount,
      TAccountNftStake extends string
        ? WritableAccount<TAccountNftStake>
        : TAccountNftStake,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RedeemWithdrawTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type RedeemWithdrawTokenInstructionDataArgs = {
  amount: number | bigint;
};

export function getRedeemWithdrawTokenInstructionDataEncoder(): Encoder<RedeemWithdrawTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REDEEM_WITHDRAW_TOKEN_DISCRIMINATOR,
    })
  );
}

export function getRedeemWithdrawTokenInstructionDataDecoder(): Decoder<RedeemWithdrawTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getRedeemWithdrawTokenInstructionDataCodec(): Codec<
  RedeemWithdrawTokenInstructionDataArgs,
  RedeemWithdrawTokenInstructionData
> {
  return combineCodec(
    getRedeemWithdrawTokenInstructionDataEncoder(),
    getRedeemWithdrawTokenInstructionDataDecoder()
  );
}

export type RedeemWithdrawTokenAsyncInput<
  TAccountStakePool extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountUserStakeTokenAccount extends string = string,
  TAccountNftStake extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  user: TransactionSigner<TAccountUser>;
  userStakeAccount?: Address<TAccountUserStakeAccount>;
  withdrawRequest: Address<TAccountWithdrawRequest>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  userStakeTokenAccount: Address<TAccountUserStakeTokenAccount>;
  nftStake?: Address<TAccountNftStake>;
  poolWallet?: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: RedeemWithdrawTokenInstructionDataArgs['amount'];
};

export async function getRedeemWithdrawTokenInstructionAsync<
  TAccountStakePool extends string,
  TAccountUser extends string,
  TAccountUserStakeAccount extends string,
  TAccountWithdrawRequest extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountUserStakeTokenAccount extends string,
  TAccountNftStake extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RedeemWithdrawTokenAsyncInput<
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountNftStake,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RedeemWithdrawTokenInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountNftStake,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    userStakeTokenAccount: {
      value: input.userStakeTokenAccount ?? null,
      isWritable: true,
    },
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userStakeAccount.value) {
    accounts.userStakeAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([85, 83, 69, 82, 95, 83, 84, 65, 75, 69])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.userStakeTokenAccount),
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRedeemWithdrawTokenInstructionDataEncoder().encode(
      args as RedeemWithdrawTokenInstructionDataArgs
    ),
  } as RedeemWithdrawTokenInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountNftStake,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type RedeemWithdrawTokenInput<
  TAccountStakePool extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountUserStakeTokenAccount extends string = string,
  TAccountNftStake extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  user: TransactionSigner<TAccountUser>;
  userStakeAccount: Address<TAccountUserStakeAccount>;
  withdrawRequest: Address<TAccountWithdrawRequest>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  userStakeTokenAccount: Address<TAccountUserStakeTokenAccount>;
  nftStake?: Address<TAccountNftStake>;
  poolWallet: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: RedeemWithdrawTokenInstructionDataArgs['amount'];
};

export function getRedeemWithdrawTokenInstruction<
  TAccountStakePool extends string,
  TAccountUser extends string,
  TAccountUserStakeAccount extends string,
  TAccountWithdrawRequest extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountUserStakeTokenAccount extends string,
  TAccountNftStake extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RedeemWithdrawTokenInput<
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountNftStake,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RedeemWithdrawTokenInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountUser,
  TAccountUserStakeAccount,
  TAccountWithdrawRequest,
  TAccountStakeTokenMint,
  TAccountStakeTokenAccount,
  TAccountUserStakeTokenAccount,
  TAccountNftStake,
  TAccountPoolWallet,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    userStakeTokenAccount: {
      value: input.userStakeTokenAccount ?? null,
      isWritable: true,
    },
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.userStakeTokenAccount),
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRedeemWithdrawTokenInstructionDataEncoder().encode(
      args as RedeemWithdrawTokenInstructionDataArgs
    ),
  } as RedeemWithdrawTokenInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountNftStake,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedRedeemWithdrawTokenInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    user: TAccountMetas[1];
    userStakeAccount: TAccountMetas[2];
    withdrawRequest: TAccountMetas[3];
    stakeTokenMint: TAccountMetas[4];
    stakeTokenAccount: TAccountMetas[5];
    userStakeTokenAccount: TAccountMetas[6];
    nftStake?: TAccountMetas[7] | undefined;
    poolWallet: TAccountMetas[8];
    payer: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
  };
  data: RedeemWithdrawTokenInstructionData;
};

export function parseRedeemWithdrawTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRedeemWithdrawTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      user: getNextAccount(),
      userStakeAccount: getNextAccount(),
      withdrawRequest: getNextAccount(),
      stakeTokenMint: getNextAccount(),
      stakeTokenAccount: getNextAccount(),
      userStakeTokenAccount: getNextAccount(),
      nftStake: getNextOptionalAccount(),
      poolWallet: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRedeemWithdrawTokenInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
