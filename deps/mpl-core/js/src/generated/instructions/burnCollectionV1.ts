/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MPL_CORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCompressionProofDecoder,
  getCompressionProofEncoder,
  type CompressionProof,
  type CompressionProofArgs,
} from '../types';

export const BURN_COLLECTION_V1_DISCRIMINATOR = 13;

export function getBurnCollectionV1DiscriminatorBytes() {
  return getU8Encoder().encode(BURN_COLLECTION_V1_DISCRIMINATOR);
}

export type BurnCollectionV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountLogWrapper extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      ...TRemainingAccounts,
    ]
  >;

export type BurnCollectionV1InstructionData = {
  discriminator: number;
  compressionProof: Option<CompressionProof>;
};

export type BurnCollectionV1InstructionDataArgs = {
  compressionProof: OptionOrNullable<CompressionProofArgs>;
};

export function getBurnCollectionV1InstructionDataEncoder(): Encoder<BurnCollectionV1InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['compressionProof', getOptionEncoder(getCompressionProofEncoder())],
    ]),
    (value) => ({ ...value, discriminator: BURN_COLLECTION_V1_DISCRIMINATOR })
  );
}

export function getBurnCollectionV1InstructionDataDecoder(): Decoder<BurnCollectionV1InstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['compressionProof', getOptionDecoder(getCompressionProofDecoder())],
  ]);
}

export function getBurnCollectionV1InstructionDataCodec(): Codec<
  BurnCollectionV1InstructionDataArgs,
  BurnCollectionV1InstructionData
> {
  return combineCodec(
    getBurnCollectionV1InstructionDataEncoder(),
    getBurnCollectionV1InstructionDataDecoder()
  );
}

export type BurnCollectionV1Input<
  TAccountCollection extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountLogWrapper extends string = string,
> = {
  /** The address of the asset */
  collection: Address<TAccountCollection>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The owner or delegate of the asset */
  authority?: TransactionSigner<TAccountAuthority>;
  /** The SPL Noop Program */
  logWrapper?: Address<TAccountLogWrapper>;
  compressionProof: BurnCollectionV1InstructionDataArgs['compressionProof'];
};

export function getBurnCollectionV1Instruction<
  TAccountCollection extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountLogWrapper extends string,
  TProgramAddress extends Address = typeof MPL_CORE_PROGRAM_ADDRESS,
>(
  input: BurnCollectionV1Input<
    TAccountCollection,
    TAccountPayer,
    TAccountAuthority,
    TAccountLogWrapper
  >,
  config?: { programAddress?: TProgramAddress }
): BurnCollectionV1Instruction<
  TProgramAddress,
  TAccountCollection,
  TAccountPayer,
  TAccountAuthority,
  TAccountLogWrapper
> {
  // Program address.
  const programAddress = config?.programAddress ?? MPL_CORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    collection: { value: input.collection ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.logWrapper),
    ],
    data: getBurnCollectionV1InstructionDataEncoder().encode(
      args as BurnCollectionV1InstructionDataArgs
    ),
    programAddress,
  } as BurnCollectionV1Instruction<
    TProgramAddress,
    TAccountCollection,
    TAccountPayer,
    TAccountAuthority,
    TAccountLogWrapper
  >);
}

export type ParsedBurnCollectionV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The address of the asset */
    collection: TAccountMetas[0];
    /** The account paying for the storage fees */
    payer: TAccountMetas[1];
    /** The owner or delegate of the asset */
    authority?: TAccountMetas[2] | undefined;
    /** The SPL Noop Program */
    logWrapper?: TAccountMetas[3] | undefined;
  };
  data: BurnCollectionV1InstructionData;
};

export function parseBurnCollectionV1Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBurnCollectionV1Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_CORE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      collection: getNextAccount(),
      payer: getNextAccount(),
      authority: getNextOptionalAccount(),
      logWrapper: getNextOptionalAccount(),
    },
    data: getBurnCollectionV1InstructionDataDecoder().decode(instruction.data),
  };
}
