/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MPL_CORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getBaseExternalPluginAdapterKeyDecoder,
  getBaseExternalPluginAdapterKeyEncoder,
  type BaseExternalPluginAdapterKey,
  type BaseExternalPluginAdapterKeyArgs,
} from '../types';

export const WRITE_EXTERNAL_PLUGIN_ADAPTER_DATA_V1_DISCRIMINATOR = 28;

export function getWriteExternalPluginAdapterDataV1DiscriminatorBytes() {
  return getU8Encoder().encode(
    WRITE_EXTERNAL_PLUGIN_ADAPTER_DATA_V1_DISCRIMINATOR
  );
}

export type WriteExternalPluginAdapterDataV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountAsset extends string | AccountMeta<string> = string,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountBuffer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountLogWrapper extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAsset extends string
        ? WritableAccount<TAccountAsset>
        : TAccountAsset,
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountBuffer extends string
        ? ReadonlyAccount<TAccountBuffer>
        : TAccountBuffer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      ...TRemainingAccounts,
    ]
  >;

export type WriteExternalPluginAdapterDataV1InstructionData = {
  discriminator: number;
  key: BaseExternalPluginAdapterKey;
  data: Option<ReadonlyUint8Array>;
};

export type WriteExternalPluginAdapterDataV1InstructionDataArgs = {
  key: BaseExternalPluginAdapterKeyArgs;
  data: OptionOrNullable<ReadonlyUint8Array>;
};

export function getWriteExternalPluginAdapterDataV1InstructionDataEncoder(): Encoder<WriteExternalPluginAdapterDataV1InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['key', getBaseExternalPluginAdapterKeyEncoder()],
      [
        'data',
        getOptionEncoder(
          addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: WRITE_EXTERNAL_PLUGIN_ADAPTER_DATA_V1_DISCRIMINATOR,
    })
  );
}

export function getWriteExternalPluginAdapterDataV1InstructionDataDecoder(): Decoder<WriteExternalPluginAdapterDataV1InstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['key', getBaseExternalPluginAdapterKeyDecoder()],
    [
      'data',
      getOptionDecoder(
        addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())
      ),
    ],
  ]);
}

export function getWriteExternalPluginAdapterDataV1InstructionDataCodec(): Codec<
  WriteExternalPluginAdapterDataV1InstructionDataArgs,
  WriteExternalPluginAdapterDataV1InstructionData
> {
  return combineCodec(
    getWriteExternalPluginAdapterDataV1InstructionDataEncoder(),
    getWriteExternalPluginAdapterDataV1InstructionDataDecoder()
  );
}

export type WriteExternalPluginAdapterDataV1Input<
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountBuffer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountLogWrapper extends string = string,
> = {
  /** The address of the asset */
  asset: Address<TAccountAsset>;
  /** The collection to which the asset belongs */
  collection?: Address<TAccountCollection>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The Data Authority of the External Plugin Adapter */
  authority?: TransactionSigner<TAccountAuthority>;
  /** The buffer to write to the external plugin */
  buffer?: Address<TAccountBuffer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The SPL Noop Program */
  logWrapper?: Address<TAccountLogWrapper>;
  key: WriteExternalPluginAdapterDataV1InstructionDataArgs['key'];
  data: WriteExternalPluginAdapterDataV1InstructionDataArgs['data'];
};

export function getWriteExternalPluginAdapterDataV1Instruction<
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountBuffer extends string,
  TAccountSystemProgram extends string,
  TAccountLogWrapper extends string,
  TProgramAddress extends Address = typeof MPL_CORE_PROGRAM_ADDRESS,
>(
  input: WriteExternalPluginAdapterDataV1Input<
    TAccountAsset,
    TAccountCollection,
    TAccountPayer,
    TAccountAuthority,
    TAccountBuffer,
    TAccountSystemProgram,
    TAccountLogWrapper
  >,
  config?: { programAddress?: TProgramAddress }
): WriteExternalPluginAdapterDataV1Instruction<
  TProgramAddress,
  TAccountAsset,
  TAccountCollection,
  TAccountPayer,
  TAccountAuthority,
  TAccountBuffer,
  TAccountSystemProgram,
  TAccountLogWrapper
> {
  // Program address.
  const programAddress = config?.programAddress ?? MPL_CORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    buffer: { value: input.buffer ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.buffer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.logWrapper),
    ],
    data: getWriteExternalPluginAdapterDataV1InstructionDataEncoder().encode(
      args as WriteExternalPluginAdapterDataV1InstructionDataArgs
    ),
    programAddress,
  } as WriteExternalPluginAdapterDataV1Instruction<
    TProgramAddress,
    TAccountAsset,
    TAccountCollection,
    TAccountPayer,
    TAccountAuthority,
    TAccountBuffer,
    TAccountSystemProgram,
    TAccountLogWrapper
  >);
}

export type ParsedWriteExternalPluginAdapterDataV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The address of the asset */
    asset: TAccountMetas[0];
    /** The collection to which the asset belongs */
    collection?: TAccountMetas[1] | undefined;
    /** The account paying for the storage fees */
    payer: TAccountMetas[2];
    /** The Data Authority of the External Plugin Adapter */
    authority?: TAccountMetas[3] | undefined;
    /** The buffer to write to the external plugin */
    buffer?: TAccountMetas[4] | undefined;
    /** The system program */
    systemProgram: TAccountMetas[5];
    /** The SPL Noop Program */
    logWrapper?: TAccountMetas[6] | undefined;
  };
  data: WriteExternalPluginAdapterDataV1InstructionData;
};

export function parseWriteExternalPluginAdapterDataV1Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWriteExternalPluginAdapterDataV1Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MPL_CORE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      asset: getNextAccount(),
      collection: getNextOptionalAccount(),
      payer: getNextAccount(),
      authority: getNextOptionalAccount(),
      buffer: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      logWrapper: getNextOptionalAccount(),
    },
    data: getWriteExternalPluginAdapterDataV1InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
