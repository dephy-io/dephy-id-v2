/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getStakePoolConfigArgsDecoder,
  getStakePoolConfigArgsEncoder,
  type StakePoolConfigArgs,
  type StakePoolConfigArgsArgs,
} from '../types';

export const ANNOUNCED_CONFIG_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  56, 17, 67, 145, 200, 140, 137, 226,
]);

export function getAnnouncedConfigAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ANNOUNCED_CONFIG_ACCOUNT_DISCRIMINATOR
  );
}

export type AnnouncedConfigAccount = {
  discriminator: ReadonlyUint8Array;
  stakePool: Address;
  authority: Address;
  timestamp: bigint;
  config: StakePoolConfigArgs;
};

export type AnnouncedConfigAccountArgs = {
  stakePool: Address;
  authority: Address;
  timestamp: number | bigint;
  config: StakePoolConfigArgsArgs;
};

export function getAnnouncedConfigAccountEncoder(): Encoder<AnnouncedConfigAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakePool', getAddressEncoder()],
      ['authority', getAddressEncoder()],
      ['timestamp', getU64Encoder()],
      ['config', getStakePoolConfigArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ANNOUNCED_CONFIG_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getAnnouncedConfigAccountDecoder(): Decoder<AnnouncedConfigAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakePool', getAddressDecoder()],
    ['authority', getAddressDecoder()],
    ['timestamp', getU64Decoder()],
    ['config', getStakePoolConfigArgsDecoder()],
  ]);
}

export function getAnnouncedConfigAccountCodec(): Codec<
  AnnouncedConfigAccountArgs,
  AnnouncedConfigAccount
> {
  return combineCodec(
    getAnnouncedConfigAccountEncoder(),
    getAnnouncedConfigAccountDecoder()
  );
}

export function decodeAnnouncedConfigAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AnnouncedConfigAccount, TAddress>;
export function decodeAnnouncedConfigAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AnnouncedConfigAccount, TAddress>;
export function decodeAnnouncedConfigAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<AnnouncedConfigAccount, TAddress>
  | MaybeAccount<AnnouncedConfigAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAnnouncedConfigAccountDecoder()
  );
}

export async function fetchAnnouncedConfigAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AnnouncedConfigAccount, TAddress>> {
  const maybeAccount = await fetchMaybeAnnouncedConfigAccount(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAnnouncedConfigAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AnnouncedConfigAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAnnouncedConfigAccount(maybeAccount);
}

export async function fetchAllAnnouncedConfigAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AnnouncedConfigAccount>[]> {
  const maybeAccounts = await fetchAllMaybeAnnouncedConfigAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAnnouncedConfigAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AnnouncedConfigAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeAnnouncedConfigAccount(maybeAccount)
  );
}

export function getAnnouncedConfigAccountSize(): number {
  return 96;
}
