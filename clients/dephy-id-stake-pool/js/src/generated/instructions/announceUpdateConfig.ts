/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getStakePoolConfigArgsDecoder,
  getStakePoolConfigArgsEncoder,
  type StakePoolConfigArgs,
  type StakePoolConfigArgsArgs,
} from '../types';

export const ANNOUNCE_UPDATE_CONFIG_DISCRIMINATOR = new Uint8Array([
  25, 72, 63, 45, 123, 42, 124, 197,
]);

export function getAnnounceUpdateConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ANNOUNCE_UPDATE_CONFIG_DISCRIMINATOR
  );
}

export type AnnounceUpdateConfigInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountAnnouncedConfig extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountAnnouncedConfig extends string
        ? WritableAccount<TAccountAnnouncedConfig>
        : TAccountAnnouncedConfig,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AnnounceUpdateConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: StakePoolConfigArgs;
};

export type AnnounceUpdateConfigInstructionDataArgs = {
  args: StakePoolConfigArgsArgs;
};

export function getAnnounceUpdateConfigInstructionDataEncoder(): FixedSizeEncoder<AnnounceUpdateConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['args', getStakePoolConfigArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ANNOUNCE_UPDATE_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getAnnounceUpdateConfigInstructionDataDecoder(): FixedSizeDecoder<AnnounceUpdateConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['args', getStakePoolConfigArgsDecoder()],
  ]);
}

export function getAnnounceUpdateConfigInstructionDataCodec(): FixedSizeCodec<
  AnnounceUpdateConfigInstructionDataArgs,
  AnnounceUpdateConfigInstructionData
> {
  return combineCodec(
    getAnnounceUpdateConfigInstructionDataEncoder(),
    getAnnounceUpdateConfigInstructionDataDecoder()
  );
}

export type AnnounceUpdateConfigAsyncInput<
  TAccountStakePool extends string = string,
  TAccountAuthority extends string = string,
  TAccountAnnouncedConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  authority: TransactionSigner<TAccountAuthority>;
  announcedConfig?: Address<TAccountAnnouncedConfig>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  args: AnnounceUpdateConfigInstructionDataArgs['args'];
};

export async function getAnnounceUpdateConfigInstructionAsync<
  TAccountStakePool extends string,
  TAccountAuthority extends string,
  TAccountAnnouncedConfig extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: AnnounceUpdateConfigAsyncInput<
    TAccountStakePool,
    TAccountAuthority,
    TAccountAnnouncedConfig,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AnnounceUpdateConfigInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountAuthority,
    TAccountAnnouncedConfig,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    announcedConfig: { value: input.announcedConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.announcedConfig.value) {
    accounts.announcedConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            65, 78, 78, 79, 85, 78, 67, 69, 68, 95, 67, 79, 78, 70, 73, 71,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.announcedConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAnnounceUpdateConfigInstructionDataEncoder().encode(
      args as AnnounceUpdateConfigInstructionDataArgs
    ),
    programAddress,
  } as AnnounceUpdateConfigInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountAuthority,
    TAccountAnnouncedConfig,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export type AnnounceUpdateConfigInput<
  TAccountStakePool extends string = string,
  TAccountAuthority extends string = string,
  TAccountAnnouncedConfig extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  authority: TransactionSigner<TAccountAuthority>;
  announcedConfig: Address<TAccountAnnouncedConfig>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  args: AnnounceUpdateConfigInstructionDataArgs['args'];
};

export function getAnnounceUpdateConfigInstruction<
  TAccountStakePool extends string,
  TAccountAuthority extends string,
  TAccountAnnouncedConfig extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: AnnounceUpdateConfigInput<
    TAccountStakePool,
    TAccountAuthority,
    TAccountAnnouncedConfig,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AnnounceUpdateConfigInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountAuthority,
  TAccountAnnouncedConfig,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    announcedConfig: { value: input.announcedConfig ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.announcedConfig),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAnnounceUpdateConfigInstructionDataEncoder().encode(
      args as AnnounceUpdateConfigInstructionDataArgs
    ),
    programAddress,
  } as AnnounceUpdateConfigInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountAuthority,
    TAccountAnnouncedConfig,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export type ParsedAnnounceUpdateConfigInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    authority: TAccountMetas[1];
    announcedConfig: TAccountMetas[2];
    payer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: AnnounceUpdateConfigInstructionData;
};

export function parseAnnounceUpdateConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAnnounceUpdateConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      authority: getNextAccount(),
      announcedConfig: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAnnounceUpdateConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
