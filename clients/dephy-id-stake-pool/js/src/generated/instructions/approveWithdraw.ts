/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const APPROVE_WITHDRAW_DISCRIMINATOR = new Uint8Array([
  21, 206, 37, 159, 241, 136, 119, 153,
]);

export function getApproveWithdrawDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    APPROVE_WITHDRAW_DISCRIMINATOR
  );
}

export type ApproveWithdrawInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountUserStakeAccount extends string | IAccountMeta<string> = string,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountWithdrawRequest extends string | IAccountMeta<string> = string,
  TAccountStakeTokenMint extends string | IAccountMeta<string> = string,
  TAccountStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUserStakeAccount extends string
        ? WritableAccount<TAccountUserStakeAccount>
        : TAccountUserStakeAccount,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountWithdrawRequest extends string
        ? WritableAccount<TAccountWithdrawRequest>
        : TAccountWithdrawRequest,
      TAccountStakeTokenMint extends string
        ? ReadonlyAccount<TAccountStakeTokenMint>
        : TAccountStakeTokenMint,
      TAccountStakeTokenAccount extends string
        ? WritableAccount<TAccountStakeTokenAccount>
        : TAccountStakeTokenAccount,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ApproveWithdrawInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ApproveWithdrawInstructionDataArgs = {};

export function getApproveWithdrawInstructionDataEncoder(): Encoder<ApproveWithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: APPROVE_WITHDRAW_DISCRIMINATOR })
  );
}

export function getApproveWithdrawInstructionDataDecoder(): Decoder<ApproveWithdrawInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getApproveWithdrawInstructionDataCodec(): Codec<
  ApproveWithdrawInstructionDataArgs,
  ApproveWithdrawInstructionData
> {
  return combineCodec(
    getApproveWithdrawInstructionDataEncoder(),
    getApproveWithdrawInstructionDataDecoder()
  );
}

export type ApproveWithdrawAsyncInput<
  TAccountUserStakeAccount extends string = string,
  TAccountStakePool extends string = string,
  TAccountAuthority extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  userStakeAccount: Address<TAccountUserStakeAccount>;
  stakePool: Address<TAccountStakePool>;
  authority: TransactionSigner<TAccountAuthority>;
  withdrawRequest: Address<TAccountWithdrawRequest>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  poolWallet?: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getApproveWithdrawInstructionAsync<
  TAccountUserStakeAccount extends string,
  TAccountStakePool extends string,
  TAccountAuthority extends string,
  TAccountWithdrawRequest extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: ApproveWithdrawAsyncInput<
    TAccountUserStakeAccount,
    TAccountStakePool,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ApproveWithdrawInstruction<
    TProgramAddress,
    TAccountUserStakeAccount,
    TAccountStakePool,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getApproveWithdrawInstructionDataEncoder().encode({}),
  } as ApproveWithdrawInstruction<
    TProgramAddress,
    TAccountUserStakeAccount,
    TAccountStakePool,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ApproveWithdrawInput<
  TAccountUserStakeAccount extends string = string,
  TAccountStakePool extends string = string,
  TAccountAuthority extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  userStakeAccount: Address<TAccountUserStakeAccount>;
  stakePool: Address<TAccountStakePool>;
  authority: TransactionSigner<TAccountAuthority>;
  withdrawRequest: Address<TAccountWithdrawRequest>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  poolWallet: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getApproveWithdrawInstruction<
  TAccountUserStakeAccount extends string,
  TAccountStakePool extends string,
  TAccountAuthority extends string,
  TAccountWithdrawRequest extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: ApproveWithdrawInput<
    TAccountUserStakeAccount,
    TAccountStakePool,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ApproveWithdrawInstruction<
  TProgramAddress,
  TAccountUserStakeAccount,
  TAccountStakePool,
  TAccountAuthority,
  TAccountWithdrawRequest,
  TAccountStakeTokenMint,
  TAccountStakeTokenAccount,
  TAccountPoolWallet,
  TAccountPayer,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getApproveWithdrawInstructionDataEncoder().encode({}),
  } as ApproveWithdrawInstruction<
    TProgramAddress,
    TAccountUserStakeAccount,
    TAccountStakePool,
    TAccountAuthority,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedApproveWithdrawInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    userStakeAccount: TAccountMetas[0];
    stakePool: TAccountMetas[1];
    authority: TAccountMetas[2];
    withdrawRequest: TAccountMetas[3];
    stakeTokenMint: TAccountMetas[4];
    stakeTokenAccount: TAccountMetas[5];
    poolWallet: TAccountMetas[6];
    payer: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: ApproveWithdrawInstructionData;
};

export function parseApproveWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedApproveWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      userStakeAccount: getNextAccount(),
      stakePool: getNextAccount(),
      authority: getNextAccount(),
      withdrawRequest: getNextAccount(),
      stakeTokenMint: getNextAccount(),
      stakeTokenAccount: getNextAccount(),
      poolWallet: getNextAccount(),
      payer: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getApproveWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
