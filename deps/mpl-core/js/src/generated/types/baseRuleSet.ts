/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUnitDecoder,
  getUnitEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';

export type BaseRuleSet =
  | { __kind: 'None' }
  | { __kind: 'ProgramAllowList'; fields: readonly [Array<Address>] }
  | { __kind: 'ProgramDenyList'; fields: readonly [Array<Address>] };

export type BaseRuleSetArgs = BaseRuleSet;

export function getBaseRuleSetEncoder(): Encoder<BaseRuleSetArgs> {
  return getDiscriminatedUnionEncoder([
    ['None', getUnitEncoder()],
    [
      'ProgramAllowList',
      getStructEncoder([
        ['fields', getTupleEncoder([getArrayEncoder(getAddressEncoder())])],
      ]),
    ],
    [
      'ProgramDenyList',
      getStructEncoder([
        ['fields', getTupleEncoder([getArrayEncoder(getAddressEncoder())])],
      ]),
    ],
  ]);
}

export function getBaseRuleSetDecoder(): Decoder<BaseRuleSet> {
  return getDiscriminatedUnionDecoder([
    ['None', getUnitDecoder()],
    [
      'ProgramAllowList',
      getStructDecoder([
        ['fields', getTupleDecoder([getArrayDecoder(getAddressDecoder())])],
      ]),
    ],
    [
      'ProgramDenyList',
      getStructDecoder([
        ['fields', getTupleDecoder([getArrayDecoder(getAddressDecoder())])],
      ]),
    ],
  ]);
}

export function getBaseRuleSetCodec(): Codec<BaseRuleSetArgs, BaseRuleSet> {
  return combineCodec(getBaseRuleSetEncoder(), getBaseRuleSetDecoder());
}

// Data Enum Helpers.
export function baseRuleSet(
  kind: 'None'
): GetDiscriminatedUnionVariant<BaseRuleSetArgs, '__kind', 'None'>;
export function baseRuleSet(
  kind: 'ProgramAllowList',
  data: GetDiscriminatedUnionVariantContent<
    BaseRuleSetArgs,
    '__kind',
    'ProgramAllowList'
  >['fields']
): GetDiscriminatedUnionVariant<BaseRuleSetArgs, '__kind', 'ProgramAllowList'>;
export function baseRuleSet(
  kind: 'ProgramDenyList',
  data: GetDiscriminatedUnionVariantContent<
    BaseRuleSetArgs,
    '__kind',
    'ProgramDenyList'
  >['fields']
): GetDiscriminatedUnionVariant<BaseRuleSetArgs, '__kind', 'ProgramDenyList'>;
export function baseRuleSet<K extends BaseRuleSetArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBaseRuleSet<K extends BaseRuleSet['__kind']>(
  kind: K,
  value: BaseRuleSet
): value is BaseRuleSet & { __kind: K } {
  return value.__kind === kind;
}
