/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const DEPHY_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  138, 216, 55, 116, 51, 4, 249, 98,
]);

export function getDephyAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPHY_ACCOUNT_DISCRIMINATOR
  );
}

export type DephyAccount = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
};

export type DephyAccountArgs = { authority: Address };

export function getDephyAccountEncoder(): Encoder<DephyAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPHY_ACCOUNT_DISCRIMINATOR })
  );
}

export function getDephyAccountDecoder(): Decoder<DephyAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
  ]);
}

export function getDephyAccountCodec(): Codec<DephyAccountArgs, DephyAccount> {
  return combineCodec(getDephyAccountEncoder(), getDephyAccountDecoder());
}

export function decodeDephyAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DephyAccount, TAddress>;
export function decodeDephyAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DephyAccount, TAddress>;
export function decodeDephyAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<DephyAccount, TAddress> | MaybeAccount<DephyAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDephyAccountDecoder()
  );
}

export async function fetchDephyAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DephyAccount, TAddress>> {
  const maybeAccount = await fetchMaybeDephyAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDephyAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DephyAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDephyAccount(maybeAccount);
}

export async function fetchAllDephyAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DephyAccount>[]> {
  const maybeAccounts = await fetchAllMaybeDephyAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDephyAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DephyAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeDephyAccount(maybeAccount));
}

export function getDephyAccountSize(): number {
  return 40;
}
