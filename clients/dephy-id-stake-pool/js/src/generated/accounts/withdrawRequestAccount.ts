/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const WITHDRAW_REQUEST_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  128, 63, 205, 31, 202, 42, 218, 83,
]);

export function getWithdrawRequestAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_REQUEST_ACCOUNT_DISCRIMINATOR
  );
}

export type WithdrawRequestAccount = {
  discriminator: ReadonlyUint8Array;
  stakePool: Address;
  user: Address;
  amount: bigint;
  timestamp: bigint;
  approved: boolean;
};

export type WithdrawRequestAccountArgs = {
  stakePool: Address;
  user: Address;
  amount: number | bigint;
  timestamp: number | bigint;
  approved: boolean;
};

export function getWithdrawRequestAccountEncoder(): Encoder<WithdrawRequestAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakePool', getAddressEncoder()],
      ['user', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['timestamp', getU64Encoder()],
      ['approved', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_REQUEST_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getWithdrawRequestAccountDecoder(): Decoder<WithdrawRequestAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakePool', getAddressDecoder()],
    ['user', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['timestamp', getU64Decoder()],
    ['approved', getBooleanDecoder()],
  ]);
}

export function getWithdrawRequestAccountCodec(): Codec<
  WithdrawRequestAccountArgs,
  WithdrawRequestAccount
> {
  return combineCodec(
    getWithdrawRequestAccountEncoder(),
    getWithdrawRequestAccountDecoder()
  );
}

export function decodeWithdrawRequestAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<WithdrawRequestAccount, TAddress>;
export function decodeWithdrawRequestAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<WithdrawRequestAccount, TAddress>;
export function decodeWithdrawRequestAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<WithdrawRequestAccount, TAddress>
  | MaybeAccount<WithdrawRequestAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWithdrawRequestAccountDecoder()
  );
}

export async function fetchWithdrawRequestAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<WithdrawRequestAccount, TAddress>> {
  const maybeAccount = await fetchMaybeWithdrawRequestAccount(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWithdrawRequestAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<WithdrawRequestAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWithdrawRequestAccount(maybeAccount);
}

export async function fetchAllWithdrawRequestAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<WithdrawRequestAccount>[]> {
  const maybeAccounts = await fetchAllMaybeWithdrawRequestAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWithdrawRequestAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<WithdrawRequestAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeWithdrawRequestAccount(maybeAccount)
  );
}

export function getWithdrawRequestAccountSize(): number {
  return 89;
}
