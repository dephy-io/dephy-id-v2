/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DEPOSIT_TOKEN_DISCRIMINATOR = new Uint8Array([
  11, 156, 96, 218, 39, 163, 180, 19,
]);

export function getDepositTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_TOKEN_DISCRIMINATOR
  );
}

export type DepositTokenInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountNftStake extends string | IAccountMeta<string> = string,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountUserStakeAccount extends string | IAccountMeta<string> = string,
  TAccountStakeTokenMint extends string | IAccountMeta<string> = string,
  TAccountStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountUserStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNftStake extends string
        ? WritableAccount<TAccountNftStake>
        : TAccountNftStake,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountUserStakeAccount extends string
        ? WritableAccount<TAccountUserStakeAccount>
        : TAccountUserStakeAccount,
      TAccountStakeTokenMint extends string
        ? ReadonlyAccount<TAccountStakeTokenMint>
        : TAccountStakeTokenMint,
      TAccountStakeTokenAccount extends string
        ? WritableAccount<TAccountStakeTokenAccount>
        : TAccountStakeTokenAccount,
      TAccountUserStakeTokenAccount extends string
        ? WritableAccount<TAccountUserStakeTokenAccount>
        : TAccountUserStakeTokenAccount,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: Option<bigint>;
};

export type DepositTokenInstructionDataArgs = {
  amount: OptionOrNullable<number | bigint>;
};

export function getDepositTokenInstructionDataEncoder(): Encoder<DepositTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_TOKEN_DISCRIMINATOR })
  );
}

export function getDepositTokenInstructionDataDecoder(): Decoder<DepositTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getDepositTokenInstructionDataCodec(): Codec<
  DepositTokenInstructionDataArgs,
  DepositTokenInstructionData
> {
  return combineCodec(
    getDepositTokenInstructionDataEncoder(),
    getDepositTokenInstructionDataDecoder()
  );
}

export type DepositTokenAsyncInput<
  TAccountNftStake extends string = string,
  TAccountStakePool extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountUserStakeTokenAccount extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  nftStake: Address<TAccountNftStake>;
  stakePool: Address<TAccountStakePool>;
  user: TransactionSigner<TAccountUser>;
  userStakeAccount?: Address<TAccountUserStakeAccount>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  userStakeTokenAccount: Address<TAccountUserStakeTokenAccount>;
  poolWallet?: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: DepositTokenInstructionDataArgs['amount'];
};

export async function getDepositTokenInstructionAsync<
  TAccountNftStake extends string,
  TAccountStakePool extends string,
  TAccountUser extends string,
  TAccountUserStakeAccount extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountUserStakeTokenAccount extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositTokenAsyncInput<
    TAccountNftStake,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DepositTokenInstruction<
    TProgramAddress,
    TAccountNftStake,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    userStakeTokenAccount: {
      value: input.userStakeTokenAccount ?? null,
      isWritable: true,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userStakeAccount.value) {
    accounts.userStakeAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.nftStake.value)),
        getBytesEncoder().encode(
          new Uint8Array([85, 83, 69, 82, 95, 83, 84, 65, 75, 69])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.userStakeTokenAccount),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDepositTokenInstructionDataEncoder().encode(
      args as DepositTokenInstructionDataArgs
    ),
  } as DepositTokenInstruction<
    TProgramAddress,
    TAccountNftStake,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type DepositTokenInput<
  TAccountNftStake extends string = string,
  TAccountStakePool extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountUserStakeTokenAccount extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  nftStake: Address<TAccountNftStake>;
  stakePool: Address<TAccountStakePool>;
  user: TransactionSigner<TAccountUser>;
  userStakeAccount: Address<TAccountUserStakeAccount>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  userStakeTokenAccount: Address<TAccountUserStakeTokenAccount>;
  poolWallet: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: DepositTokenInstructionDataArgs['amount'];
};

export function getDepositTokenInstruction<
  TAccountNftStake extends string,
  TAccountStakePool extends string,
  TAccountUser extends string,
  TAccountUserStakeAccount extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountUserStakeTokenAccount extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: DepositTokenInput<
    TAccountNftStake,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DepositTokenInstruction<
  TProgramAddress,
  TAccountNftStake,
  TAccountStakePool,
  TAccountUser,
  TAccountUserStakeAccount,
  TAccountStakeTokenMint,
  TAccountStakeTokenAccount,
  TAccountUserStakeTokenAccount,
  TAccountPoolWallet,
  TAccountPayer,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    userStakeTokenAccount: {
      value: input.userStakeTokenAccount ?? null,
      isWritable: true,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.userStakeTokenAccount),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDepositTokenInstructionDataEncoder().encode(
      args as DepositTokenInstructionDataArgs
    ),
  } as DepositTokenInstruction<
    TProgramAddress,
    TAccountNftStake,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUserStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDepositTokenInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    nftStake: TAccountMetas[0];
    stakePool: TAccountMetas[1];
    user: TAccountMetas[2];
    userStakeAccount: TAccountMetas[3];
    stakeTokenMint: TAccountMetas[4];
    stakeTokenAccount: TAccountMetas[5];
    userStakeTokenAccount: TAccountMetas[6];
    poolWallet: TAccountMetas[7];
    payer: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
  };
  data: DepositTokenInstructionData;
};

export function parseDepositTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDepositTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nftStake: getNextAccount(),
      stakePool: getNextAccount(),
      user: getNextAccount(),
      userStakeAccount: getNextAccount(),
      stakeTokenMint: getNextAccount(),
      stakeTokenAccount: getNextAccount(),
      userStakeTokenAccount: getNextAccount(),
      poolWallet: getNextAccount(),
      payer: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDepositTokenInstructionDataDecoder().decode(instruction.data),
  };
}
