/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const USER_STAKE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  167, 87, 153, 81, 129, 95, 15, 213,
]);

export function getUserStakeAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_STAKE_ACCOUNT_DISCRIMINATOR
  );
}

export type UserStakeAccount = {
  discriminator: ReadonlyUint8Array;
  stakePool: Address;
  nftStake: Address;
  user: Address;
  amount: bigint;
  lastDepositTimestamp: bigint;
  requestedWithdrawal: bigint;
};

export type UserStakeAccountArgs = {
  stakePool: Address;
  nftStake: Address;
  user: Address;
  amount: number | bigint;
  lastDepositTimestamp: number | bigint;
  requestedWithdrawal: number | bigint;
};

export function getUserStakeAccountEncoder(): Encoder<UserStakeAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakePool', getAddressEncoder()],
      ['nftStake', getAddressEncoder()],
      ['user', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['lastDepositTimestamp', getU64Encoder()],
      ['requestedWithdrawal', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_STAKE_ACCOUNT_DISCRIMINATOR })
  );
}

export function getUserStakeAccountDecoder(): Decoder<UserStakeAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakePool', getAddressDecoder()],
    ['nftStake', getAddressDecoder()],
    ['user', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['lastDepositTimestamp', getU64Decoder()],
    ['requestedWithdrawal', getU64Decoder()],
  ]);
}

export function getUserStakeAccountCodec(): Codec<
  UserStakeAccountArgs,
  UserStakeAccount
> {
  return combineCodec(
    getUserStakeAccountEncoder(),
    getUserStakeAccountDecoder()
  );
}

export function decodeUserStakeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserStakeAccount, TAddress>;
export function decodeUserStakeAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserStakeAccount, TAddress>;
export function decodeUserStakeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<UserStakeAccount, TAddress>
  | MaybeAccount<UserStakeAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserStakeAccountDecoder()
  );
}

export async function fetchUserStakeAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserStakeAccount, TAddress>> {
  const maybeAccount = await fetchMaybeUserStakeAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserStakeAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserStakeAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserStakeAccount(maybeAccount);
}

export async function fetchAllUserStakeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserStakeAccount>[]> {
  const maybeAccounts = await fetchAllMaybeUserStakeAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserStakeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserStakeAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeUserStakeAccount(maybeAccount)
  );
}

export function getUserStakeAccountSize(): number {
  return 128;
}
