/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const PREPARE_REWARD_TOKEN_ACCOUNTS_DISCRIMINATOR = new Uint8Array([
  163, 81, 196, 110, 71, 97, 184, 97,
]);

export function getPrepareRewardTokenAccountsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PREPARE_REWARD_TOKEN_ACCOUNTS_DISCRIMINATOR
  );
}

export type PrepareRewardTokenAccountsInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountRewardTokenMint extends string | IAccountMeta<string> = string,
  TAccountRewardTokenAccount extends string | IAccountMeta<string> = string,
  TAccountCommissionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRewardTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountRewardTokenMint extends string
        ? ReadonlyAccount<TAccountRewardTokenMint>
        : TAccountRewardTokenMint,
      TAccountRewardTokenAccount extends string
        ? WritableAccount<TAccountRewardTokenAccount>
        : TAccountRewardTokenAccount,
      TAccountCommissionTokenAccount extends string
        ? WritableAccount<TAccountCommissionTokenAccount>
        : TAccountCommissionTokenAccount,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRewardTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardTokenProgram>
        : TAccountRewardTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PrepareRewardTokenAccountsInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type PrepareRewardTokenAccountsInstructionDataArgs = {};

export function getPrepareRewardTokenAccountsInstructionDataEncoder(): Encoder<PrepareRewardTokenAccountsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: PREPARE_REWARD_TOKEN_ACCOUNTS_DISCRIMINATOR,
    })
  );
}

export function getPrepareRewardTokenAccountsInstructionDataDecoder(): Decoder<PrepareRewardTokenAccountsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getPrepareRewardTokenAccountsInstructionDataCodec(): Codec<
  PrepareRewardTokenAccountsInstructionDataArgs,
  PrepareRewardTokenAccountsInstructionData
> {
  return combineCodec(
    getPrepareRewardTokenAccountsInstructionDataEncoder(),
    getPrepareRewardTokenAccountsInstructionDataDecoder()
  );
}

export type PrepareRewardTokenAccountsAsyncInput<
  TAccountStakePool extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountRewardTokenMint extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountCommissionTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  poolWallet?: Address<TAccountPoolWallet>;
  rewardTokenMint: Address<TAccountRewardTokenMint>;
  rewardTokenAccount?: Address<TAccountRewardTokenAccount>;
  commissionTokenAccount?: Address<TAccountCommissionTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
};

export async function getPrepareRewardTokenAccountsInstructionAsync<
  TAccountStakePool extends string,
  TAccountPoolWallet extends string,
  TAccountRewardTokenMint extends string,
  TAccountRewardTokenAccount extends string,
  TAccountCommissionTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountRewardTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: PrepareRewardTokenAccountsAsyncInput<
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountRewardTokenMint,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PrepareRewardTokenAccountsInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountRewardTokenMint,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    rewardTokenMint: {
      value: input.rewardTokenMint ?? null,
      isWritable: false,
    },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: true,
    },
    commissionTokenAccount: {
      value: input.commissionTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.rewardTokenAccount.value) {
    accounts.rewardTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([82, 69, 87, 65, 82, 68, 95, 84, 79, 75, 69, 78])
        ),
      ],
    });
  }
  if (!accounts.commissionTokenAccount.value) {
    accounts.commissionTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([67, 79, 77, 77, 73, 83, 83, 73, 79, 78])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.rewardTokenMint),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.commissionTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rewardTokenProgram),
    ],
    programAddress,
    data: getPrepareRewardTokenAccountsInstructionDataEncoder().encode({}),
  } as PrepareRewardTokenAccountsInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountRewardTokenMint,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >;

  return instruction;
}

export type PrepareRewardTokenAccountsInput<
  TAccountStakePool extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountRewardTokenMint extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountCommissionTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRewardTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  poolWallet: Address<TAccountPoolWallet>;
  rewardTokenMint: Address<TAccountRewardTokenMint>;
  rewardTokenAccount: Address<TAccountRewardTokenAccount>;
  commissionTokenAccount: Address<TAccountCommissionTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
};

export function getPrepareRewardTokenAccountsInstruction<
  TAccountStakePool extends string,
  TAccountPoolWallet extends string,
  TAccountRewardTokenMint extends string,
  TAccountRewardTokenAccount extends string,
  TAccountCommissionTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountRewardTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: PrepareRewardTokenAccountsInput<
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountRewardTokenMint,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): PrepareRewardTokenAccountsInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountPoolWallet,
  TAccountRewardTokenMint,
  TAccountRewardTokenAccount,
  TAccountCommissionTokenAccount,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountRewardTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    rewardTokenMint: {
      value: input.rewardTokenMint ?? null,
      isWritable: false,
    },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: true,
    },
    commissionTokenAccount: {
      value: input.commissionTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.rewardTokenMint),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.commissionTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rewardTokenProgram),
    ],
    programAddress,
    data: getPrepareRewardTokenAccountsInstructionDataEncoder().encode({}),
  } as PrepareRewardTokenAccountsInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountRewardTokenMint,
    TAccountRewardTokenAccount,
    TAccountCommissionTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountRewardTokenProgram
  >;

  return instruction;
}

export type ParsedPrepareRewardTokenAccountsInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    poolWallet: TAccountMetas[1];
    rewardTokenMint: TAccountMetas[2];
    rewardTokenAccount: TAccountMetas[3];
    commissionTokenAccount: TAccountMetas[4];
    payer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    rewardTokenProgram: TAccountMetas[7];
  };
  data: PrepareRewardTokenAccountsInstructionData;
};

export function parsePrepareRewardTokenAccountsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedPrepareRewardTokenAccountsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      poolWallet: getNextAccount(),
      rewardTokenMint: getNextAccount(),
      rewardTokenAccount: getNextAccount(),
      commissionTokenAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      rewardTokenProgram: getNextAccount(),
    },
    data: getPrepareRewardTokenAccountsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
