/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_DISCRIMINATOR = new Uint8Array([
  183, 18, 70, 156, 148, 109, 161, 34,
]);

export function getWithdrawDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WITHDRAW_DISCRIMINATOR);
}

export type WithdrawInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountUserStakeAccount extends string | IAccountMeta<string> = string,
  TAccountStakeTokenMint extends string | IAccountMeta<string> = string,
  TAccountStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountUserStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountUserStakeAccount extends string
        ? WritableAccount<TAccountUserStakeAccount>
        : TAccountUserStakeAccount,
      TAccountStakeTokenMint extends string
        ? ReadonlyAccount<TAccountStakeTokenMint>
        : TAccountStakeTokenMint,
      TAccountStakeTokenAccount extends string
        ? WritableAccount<TAccountStakeTokenAccount>
        : TAccountStakeTokenAccount,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountUserStakeTokenAccount extends string
        ? WritableAccount<TAccountUserStakeTokenAccount>
        : TAccountUserStakeTokenAccount,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type WithdrawInstructionDataArgs = { amount: number | bigint };

export function getWithdrawInstructionDataEncoder(): Encoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_DISCRIMINATOR })
  );
}

export function getWithdrawInstructionDataDecoder(): Decoder<WithdrawInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getWithdrawInstructionDataCodec(): Codec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder()
  );
}

export type WithdrawAsyncInput<
  TAccountStakePool extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  poolWallet?: Address<TAccountPoolWallet>;
  userStakeAccount?: Address<TAccountUserStakeAccount>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  user: TransactionSigner<TAccountUser>;
  userStakeTokenAccount?: Address<TAccountUserStakeTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  amount: WithdrawInstructionDataArgs['amount'];
};

export async function getWithdrawInstructionAsync<
  TAccountStakePool extends string,
  TAccountPoolWallet extends string,
  TAccountUserStakeAccount extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountUser extends string,
  TAccountUserStakeTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawAsyncInput<
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUser,
    TAccountUserStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUser,
    TAccountUserStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    user: { value: input.user ?? null, isWritable: false },
    userStakeTokenAccount: {
      value: input.userStakeTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.userStakeAccount.value) {
    accounts.userStakeAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([85, 83, 69, 82, 95, 83, 84, 65, 75, 69])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.userStakeTokenAccount.value) {
    accounts.userStakeTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.stakeTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getWithdrawInstructionDataEncoder().encode(
      args as WithdrawInstructionDataArgs
    ),
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUser,
    TAccountUserStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type WithdrawInput<
  TAccountStakePool extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  poolWallet: Address<TAccountPoolWallet>;
  userStakeAccount: Address<TAccountUserStakeAccount>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  user: TransactionSigner<TAccountUser>;
  userStakeTokenAccount: Address<TAccountUserStakeTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  amount: WithdrawInstructionDataArgs['amount'];
};

export function getWithdrawInstruction<
  TAccountStakePool extends string,
  TAccountPoolWallet extends string,
  TAccountUserStakeAccount extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountUser extends string,
  TAccountUserStakeTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: WithdrawInput<
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUser,
    TAccountUserStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountPoolWallet,
  TAccountUserStakeAccount,
  TAccountStakeTokenMint,
  TAccountStakeTokenAccount,
  TAccountUser,
  TAccountUserStakeTokenAccount,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    user: { value: input.user ?? null, isWritable: false },
    userStakeTokenAccount: {
      value: input.userStakeTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getWithdrawInstructionDataEncoder().encode(
      args as WithdrawInstructionDataArgs
    ),
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountPoolWallet,
    TAccountUserStakeAccount,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountUser,
    TAccountUserStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedWithdrawInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    poolWallet: TAccountMetas[1];
    userStakeAccount: TAccountMetas[2];
    stakeTokenMint: TAccountMetas[3];
    stakeTokenAccount: TAccountMetas[4];
    user: TAccountMetas[5];
    userStakeTokenAccount: TAccountMetas[6];
    payer: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
  };
  data: WithdrawInstructionData;
};

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      poolWallet: getNextAccount(),
      userStakeAccount: getNextAccount(),
      stakeTokenMint: getNextAccount(),
      stakeTokenAccount: getNextAccount(),
      user: getNextAccount(),
      userStakeTokenAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
