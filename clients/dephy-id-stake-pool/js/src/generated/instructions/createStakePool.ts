/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getStakePoolConfigArgsDecoder,
  getStakePoolConfigArgsEncoder,
  type StakePoolConfigArgs,
  type StakePoolConfigArgsArgs,
} from '../types';

export const CREATE_STAKE_POOL_DISCRIMINATOR = new Uint8Array([
  198, 175, 88, 63, 128, 43, 8, 214,
]);

export function getCreateStakePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_STAKE_POOL_DISCRIMINATOR
  );
}

export type CreateStakePoolInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountStakePoolAuthority extends string | AccountMeta<string> = string,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountStakeTokenMint extends string | AccountMeta<string> = string,
  TAccountPoolWallet extends string | AccountMeta<string> = string,
  TAccountStakeTokenAccount extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountStakeTokenProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlyAccount<TAccountAdmin>
        : TAccountAdmin,
      TAccountStakePool extends string
        ? WritableSignerAccount<TAccountStakePool> &
            AccountSignerMeta<TAccountStakePool>
        : TAccountStakePool,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountStakePoolAuthority extends string
        ? ReadonlyAccount<TAccountStakePoolAuthority>
        : TAccountStakePoolAuthority,
      TAccountCollection extends string
        ? ReadonlyAccount<TAccountCollection>
        : TAccountCollection,
      TAccountStakeTokenMint extends string
        ? ReadonlyAccount<TAccountStakeTokenMint>
        : TAccountStakeTokenMint,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountStakeTokenAccount extends string
        ? WritableAccount<TAccountStakeTokenAccount>
        : TAccountStakeTokenAccount,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountStakeTokenProgram extends string
        ? ReadonlyAccount<TAccountStakeTokenProgram>
        : TAccountStakeTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateStakePoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: StakePoolConfigArgs;
};

export type CreateStakePoolInstructionDataArgs = {
  args: StakePoolConfigArgsArgs;
};

export function getCreateStakePoolInstructionDataEncoder(): FixedSizeEncoder<CreateStakePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['args', getStakePoolConfigArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_STAKE_POOL_DISCRIMINATOR })
  );
}

export function getCreateStakePoolInstructionDataDecoder(): FixedSizeDecoder<CreateStakePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['args', getStakePoolConfigArgsDecoder()],
  ]);
}

export function getCreateStakePoolInstructionDataCodec(): FixedSizeCodec<
  CreateStakePoolInstructionDataArgs,
  CreateStakePoolInstructionData
> {
  return combineCodec(
    getCreateStakePoolInstructionDataEncoder(),
    getCreateStakePoolInstructionDataDecoder()
  );
}

export type CreateStakePoolAsyncInput<
  TAccountAdmin extends string = string,
  TAccountStakePool extends string = string,
  TAccountAuthority extends string = string,
  TAccountStakePoolAuthority extends string = string,
  TAccountCollection extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeTokenProgram extends string = string,
> = {
  admin?: Address<TAccountAdmin>;
  stakePool: TransactionSigner<TAccountStakePool>;
  authority: TransactionSigner<TAccountAuthority>;
  stakePoolAuthority: Address<TAccountStakePoolAuthority>;
  collection: Address<TAccountCollection>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  poolWallet?: Address<TAccountPoolWallet>;
  stakeTokenAccount?: Address<TAccountStakeTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeTokenProgram: Address<TAccountStakeTokenProgram>;
  args: CreateStakePoolInstructionDataArgs['args'];
};

export async function getCreateStakePoolInstructionAsync<
  TAccountAdmin extends string,
  TAccountStakePool extends string,
  TAccountAuthority extends string,
  TAccountStakePoolAuthority extends string,
  TAccountCollection extends string,
  TAccountStakeTokenMint extends string,
  TAccountPoolWallet extends string,
  TAccountStakeTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountStakeTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CreateStakePoolAsyncInput<
    TAccountAdmin,
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakePoolAuthority,
    TAccountCollection,
    TAccountStakeTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateStakePoolInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakePoolAuthority,
    TAccountCollection,
    TAccountStakeTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    stakePoolAuthority: {
      value: input.stakePoolAuthority ?? null,
      isWritable: false,
    },
    collection: { value: input.collection ?? null, isWritable: false },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeTokenProgram: {
      value: input.stakeTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.admin.value) {
    accounts.admin.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [getBytesEncoder().encode(new Uint8Array([65, 68, 77, 73, 78]))],
    });
  }
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.stakeTokenAccount.value) {
    accounts.stakeTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([83, 84, 65, 75, 69, 95, 84, 79, 75, 69, 78])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.stakePoolAuthority),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeTokenProgram),
    ],
    data: getCreateStakePoolInstructionDataEncoder().encode(
      args as CreateStakePoolInstructionDataArgs
    ),
    programAddress,
  } as CreateStakePoolInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakePoolAuthority,
    TAccountCollection,
    TAccountStakeTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram
  >);
}

export type CreateStakePoolInput<
  TAccountAdmin extends string = string,
  TAccountStakePool extends string = string,
  TAccountAuthority extends string = string,
  TAccountStakePoolAuthority extends string = string,
  TAccountCollection extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountStakeTokenProgram extends string = string,
> = {
  admin: Address<TAccountAdmin>;
  stakePool: TransactionSigner<TAccountStakePool>;
  authority: TransactionSigner<TAccountAuthority>;
  stakePoolAuthority: Address<TAccountStakePoolAuthority>;
  collection: Address<TAccountCollection>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  poolWallet: Address<TAccountPoolWallet>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  stakeTokenProgram: Address<TAccountStakeTokenProgram>;
  args: CreateStakePoolInstructionDataArgs['args'];
};

export function getCreateStakePoolInstruction<
  TAccountAdmin extends string,
  TAccountStakePool extends string,
  TAccountAuthority extends string,
  TAccountStakePoolAuthority extends string,
  TAccountCollection extends string,
  TAccountStakeTokenMint extends string,
  TAccountPoolWallet extends string,
  TAccountStakeTokenAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountStakeTokenProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CreateStakePoolInput<
    TAccountAdmin,
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakePoolAuthority,
    TAccountCollection,
    TAccountStakeTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateStakePoolInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountStakePool,
  TAccountAuthority,
  TAccountStakePoolAuthority,
  TAccountCollection,
  TAccountStakeTokenMint,
  TAccountPoolWallet,
  TAccountStakeTokenAccount,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountStakeTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    stakePoolAuthority: {
      value: input.stakePoolAuthority ?? null,
      isWritable: false,
    },
    collection: { value: input.collection ?? null, isWritable: false },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    stakeTokenProgram: {
      value: input.stakeTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.stakePoolAuthority),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.stakeTokenProgram),
    ],
    data: getCreateStakePoolInstructionDataEncoder().encode(
      args as CreateStakePoolInstructionDataArgs
    ),
    programAddress,
  } as CreateStakePoolInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountStakePool,
    TAccountAuthority,
    TAccountStakePoolAuthority,
    TAccountCollection,
    TAccountStakeTokenMint,
    TAccountPoolWallet,
    TAccountStakeTokenAccount,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountStakeTokenProgram
  >);
}

export type ParsedCreateStakePoolInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    stakePool: TAccountMetas[1];
    authority: TAccountMetas[2];
    stakePoolAuthority: TAccountMetas[3];
    collection: TAccountMetas[4];
    stakeTokenMint: TAccountMetas[5];
    poolWallet: TAccountMetas[6];
    stakeTokenAccount: TAccountMetas[7];
    payer: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    stakeTokenProgram: TAccountMetas[10];
  };
  data: CreateStakePoolInstructionData;
};

export function parseCreateStakePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateStakePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      stakePool: getNextAccount(),
      authority: getNextAccount(),
      stakePoolAuthority: getNextAccount(),
      collection: getNextAccount(),
      stakeTokenMint: getNextAccount(),
      poolWallet: getNextAccount(),
      stakeTokenAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      stakeTokenProgram: getNextAccount(),
    },
    data: getCreateStakePoolInstructionDataDecoder().decode(instruction.data),
  };
}
