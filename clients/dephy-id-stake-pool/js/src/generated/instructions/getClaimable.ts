/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const GET_CLAIMABLE_DISCRIMINATOR = new Uint8Array([
  111, 52, 219, 251, 78, 77, 231, 124,
]);

export function getGetClaimableDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_CLAIMABLE_DISCRIMINATOR
  );
}

export type GetClaimableInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      ...TRemainingAccounts,
    ]
  >;

export type GetClaimableInstructionData = { discriminator: ReadonlyUint8Array };

export type GetClaimableInstructionDataArgs = {};

export function getGetClaimableInstructionDataEncoder(): Encoder<GetClaimableInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: GET_CLAIMABLE_DISCRIMINATOR })
  );
}

export function getGetClaimableInstructionDataDecoder(): Decoder<GetClaimableInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGetClaimableInstructionDataCodec(): Codec<
  GetClaimableInstructionDataArgs,
  GetClaimableInstructionData
> {
  return combineCodec(
    getGetClaimableInstructionDataEncoder(),
    getGetClaimableInstructionDataDecoder()
  );
}

export type GetClaimableInput<TAccountStakePool extends string = string> = {
  stakePool: Address<TAccountStakePool>;
};

export function getGetClaimableInstruction<
  TAccountStakePool extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: GetClaimableInput<TAccountStakePool>,
  config?: { programAddress?: TProgramAddress }
): GetClaimableInstruction<TProgramAddress, TAccountStakePool> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.stakePool)],
    programAddress,
    data: getGetClaimableInstructionDataEncoder().encode({}),
  } as GetClaimableInstruction<TProgramAddress, TAccountStakePool>;

  return instruction;
}

export type ParsedGetClaimableInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
  };
  data: GetClaimableInstructionData;
};

export function parseGetClaimableInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGetClaimableInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
    },
    data: getGetClaimableInstructionDataDecoder().decode(instruction.data),
  };
}
