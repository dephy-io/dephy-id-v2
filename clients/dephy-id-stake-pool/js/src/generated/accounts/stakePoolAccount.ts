/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getStakePoolConfigDecoder,
  getStakePoolConfigEncoder,
  type StakePoolConfig,
  type StakePoolConfigArgs,
} from '../types';

export const STAKE_POOL_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  87, 244, 250, 124, 34, 252, 189, 44,
]);

export function getStakePoolAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STAKE_POOL_ACCOUNT_DISCRIMINATOR
  );
}

export type StakePoolAccount = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  announcedConfig: Option<Address>;
  config: StakePoolConfig;
  stakeTokenAccount: Address;
  totalAmount: bigint;
  requestedWithdrawal: bigint;
};

export type StakePoolAccountArgs = {
  authority: Address;
  announcedConfig: OptionOrNullable<Address>;
  config: StakePoolConfigArgs;
  stakeTokenAccount: Address;
  totalAmount: number | bigint;
  requestedWithdrawal: number | bigint;
};

export function getStakePoolAccountEncoder(): Encoder<StakePoolAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['announcedConfig', getOptionEncoder(getAddressEncoder())],
      ['config', getStakePoolConfigEncoder()],
      ['stakeTokenAccount', getAddressEncoder()],
      ['totalAmount', getU64Encoder()],
      ['requestedWithdrawal', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STAKE_POOL_ACCOUNT_DISCRIMINATOR })
  );
}

export function getStakePoolAccountDecoder(): Decoder<StakePoolAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['announcedConfig', getOptionDecoder(getAddressDecoder())],
    ['config', getStakePoolConfigDecoder()],
    ['stakeTokenAccount', getAddressDecoder()],
    ['totalAmount', getU64Decoder()],
    ['requestedWithdrawal', getU64Decoder()],
  ]);
}

export function getStakePoolAccountCodec(): Codec<
  StakePoolAccountArgs,
  StakePoolAccount
> {
  return combineCodec(
    getStakePoolAccountEncoder(),
    getStakePoolAccountDecoder()
  );
}

export function decodeStakePoolAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StakePoolAccount, TAddress>;
export function decodeStakePoolAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StakePoolAccount, TAddress>;
export function decodeStakePoolAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<StakePoolAccount, TAddress>
  | MaybeAccount<StakePoolAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakePoolAccountDecoder()
  );
}

export async function fetchStakePoolAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StakePoolAccount, TAddress>> {
  const maybeAccount = await fetchMaybeStakePoolAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakePoolAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StakePoolAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakePoolAccount(maybeAccount);
}

export async function fetchAllStakePoolAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StakePoolAccount>[]> {
  const maybeAccounts = await fetchAllMaybeStakePoolAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakePoolAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StakePoolAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeStakePoolAccount(maybeAccount)
  );
}
