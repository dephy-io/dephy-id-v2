/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REQUEST_WITHDRAW_TOKEN_DISCRIMINATOR = new Uint8Array([
  49, 150, 198, 22, 253, 95, 59, 136,
]);

export function getRequestWithdrawTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REQUEST_WITHDRAW_TOKEN_DISCRIMINATOR
  );
}

export type RequestWithdrawTokenInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountNftStake extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountUserStakeAccount extends string | IAccountMeta<string> = string,
  TAccountWithdrawRequest extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountNftStake extends string
        ? WritableAccount<TAccountNftStake>
        : TAccountNftStake,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountUserStakeAccount extends string
        ? WritableAccount<TAccountUserStakeAccount>
        : TAccountUserStakeAccount,
      TAccountWithdrawRequest extends string
        ? WritableSignerAccount<TAccountWithdrawRequest> &
            IAccountSignerMeta<TAccountWithdrawRequest>
        : TAccountWithdrawRequest,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RequestWithdrawTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type RequestWithdrawTokenInstructionDataArgs = {
  amount: number | bigint;
};

export function getRequestWithdrawTokenInstructionDataEncoder(): Encoder<RequestWithdrawTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REQUEST_WITHDRAW_TOKEN_DISCRIMINATOR,
    })
  );
}

export function getRequestWithdrawTokenInstructionDataDecoder(): Decoder<RequestWithdrawTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getRequestWithdrawTokenInstructionDataCodec(): Codec<
  RequestWithdrawTokenInstructionDataArgs,
  RequestWithdrawTokenInstructionData
> {
  return combineCodec(
    getRequestWithdrawTokenInstructionDataEncoder(),
    getRequestWithdrawTokenInstructionDataDecoder()
  );
}

export type RequestWithdrawTokenAsyncInput<
  TAccountStakePool extends string = string,
  TAccountNftStake extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  nftStake: Address<TAccountNftStake>;
  user: TransactionSigner<TAccountUser>;
  userStakeAccount?: Address<TAccountUserStakeAccount>;
  withdrawRequest: TransactionSigner<TAccountWithdrawRequest>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: RequestWithdrawTokenInstructionDataArgs['amount'];
};

export async function getRequestWithdrawTokenInstructionAsync<
  TAccountStakePool extends string,
  TAccountNftStake extends string,
  TAccountUser extends string,
  TAccountUserStakeAccount extends string,
  TAccountWithdrawRequest extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RequestWithdrawTokenAsyncInput<
    TAccountStakePool,
    TAccountNftStake,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RequestWithdrawTokenInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountNftStake,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userStakeAccount.value) {
    accounts.userStakeAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.nftStake.value)),
        getBytesEncoder().encode(
          new Uint8Array([85, 83, 69, 82, 95, 83, 84, 65, 75, 69])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRequestWithdrawTokenInstructionDataEncoder().encode(
      args as RequestWithdrawTokenInstructionDataArgs
    ),
  } as RequestWithdrawTokenInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountNftStake,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type RequestWithdrawTokenInput<
  TAccountStakePool extends string = string,
  TAccountNftStake extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  nftStake: Address<TAccountNftStake>;
  user: TransactionSigner<TAccountUser>;
  userStakeAccount: Address<TAccountUserStakeAccount>;
  withdrawRequest: TransactionSigner<TAccountWithdrawRequest>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: RequestWithdrawTokenInstructionDataArgs['amount'];
};

export function getRequestWithdrawTokenInstruction<
  TAccountStakePool extends string,
  TAccountNftStake extends string,
  TAccountUser extends string,
  TAccountUserStakeAccount extends string,
  TAccountWithdrawRequest extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RequestWithdrawTokenInput<
    TAccountStakePool,
    TAccountNftStake,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RequestWithdrawTokenInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountNftStake,
  TAccountUser,
  TAccountUserStakeAccount,
  TAccountWithdrawRequest,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRequestWithdrawTokenInstructionDataEncoder().encode(
      args as RequestWithdrawTokenInstructionDataArgs
    ),
  } as RequestWithdrawTokenInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountNftStake,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedRequestWithdrawTokenInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    nftStake: TAccountMetas[1];
    user: TAccountMetas[2];
    userStakeAccount: TAccountMetas[3];
    withdrawRequest: TAccountMetas[4];
    payer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: RequestWithdrawTokenInstructionData;
};

export function parseRequestWithdrawTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRequestWithdrawTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      nftStake: getNextAccount(),
      user: getNextAccount(),
      userStakeAccount: getNextAccount(),
      withdrawRequest: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRequestWithdrawTokenInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
