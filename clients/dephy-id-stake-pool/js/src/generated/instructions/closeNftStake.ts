/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLOSE_NFT_STAKE_DISCRIMINATOR = new Uint8Array([
  254, 163, 164, 157, 253, 253, 83, 23,
]);

export function getCloseNftStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_NFT_STAKE_DISCRIMINATOR
  );
}

export type CloseNftStakeInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountNftStake extends string | IAccountMeta<string> = string,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNftStake extends string
        ? WritableAccount<TAccountNftStake>
        : TAccountNftStake,
      TAccountStakePool extends string
        ? ReadonlyAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseNftStakeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseNftStakeInstructionDataArgs = {};

export function getCloseNftStakeInstructionDataEncoder(): Encoder<CloseNftStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_NFT_STAKE_DISCRIMINATOR })
  );
}

export function getCloseNftStakeInstructionDataDecoder(): Decoder<CloseNftStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseNftStakeInstructionDataCodec(): Codec<
  CloseNftStakeInstructionDataArgs,
  CloseNftStakeInstructionData
> {
  return combineCodec(
    getCloseNftStakeInstructionDataEncoder(),
    getCloseNftStakeInstructionDataDecoder()
  );
}

export type CloseNftStakeAsyncInput<
  TAccountNftStake extends string = string,
  TAccountStakePool extends string = string,
  TAccountStakeAuthority extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  nftStake: Address<TAccountNftStake>;
  stakePool: Address<TAccountStakePool>;
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  poolWallet?: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getCloseNftStakeInstructionAsync<
  TAccountNftStake extends string,
  TAccountStakePool extends string,
  TAccountStakeAuthority extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CloseNftStakeAsyncInput<
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseNftStakeInstruction<
    TProgramAddress,
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakeAuthority),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCloseNftStakeInstructionDataEncoder().encode({}),
  } as CloseNftStakeInstruction<
    TProgramAddress,
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CloseNftStakeInput<
  TAccountNftStake extends string = string,
  TAccountStakePool extends string = string,
  TAccountStakeAuthority extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  nftStake: Address<TAccountNftStake>;
  stakePool: Address<TAccountStakePool>;
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  poolWallet: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCloseNftStakeInstruction<
  TAccountNftStake extends string,
  TAccountStakePool extends string,
  TAccountStakeAuthority extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: CloseNftStakeInput<
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseNftStakeInstruction<
  TProgramAddress,
  TAccountNftStake,
  TAccountStakePool,
  TAccountStakeAuthority,
  TAccountPoolWallet,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    nftStake: { value: input.nftStake ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: false },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.nftStake),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakeAuthority),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCloseNftStakeInstructionDataEncoder().encode({}),
  } as CloseNftStakeInstruction<
    TProgramAddress,
    TAccountNftStake,
    TAccountStakePool,
    TAccountStakeAuthority,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCloseNftStakeInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    nftStake: TAccountMetas[0];
    stakePool: TAccountMetas[1];
    stakeAuthority: TAccountMetas[2];
    poolWallet: TAccountMetas[3];
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: CloseNftStakeInstructionData;
};

export function parseCloseNftStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseNftStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nftStake: getNextAccount(),
      stakePool: getNextAccount(),
      stakeAuthority: getNextAccount(),
      poolWallet: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCloseNftStakeInstructionDataDecoder().decode(instruction.data),
  };
}
