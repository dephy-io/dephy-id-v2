/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const NFT_STAKE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  109, 22, 236, 62, 96, 242, 14, 116,
]);

export function getNftStakeAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    NFT_STAKE_ACCOUNT_DISCRIMINATOR
  );
}

export type NftStakeAccount = {
  discriminator: ReadonlyUint8Array;
  stakePool: Address;
  stakeAuthority: Address;
  nftTokenAccount: Address;
  tokenAmount: bigint;
};

export type NftStakeAccountArgs = {
  stakePool: Address;
  stakeAuthority: Address;
  nftTokenAccount: Address;
  tokenAmount: number | bigint;
};

export function getNftStakeAccountEncoder(): Encoder<NftStakeAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakePool', getAddressEncoder()],
      ['stakeAuthority', getAddressEncoder()],
      ['nftTokenAccount', getAddressEncoder()],
      ['tokenAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: NFT_STAKE_ACCOUNT_DISCRIMINATOR })
  );
}

export function getNftStakeAccountDecoder(): Decoder<NftStakeAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakePool', getAddressDecoder()],
    ['stakeAuthority', getAddressDecoder()],
    ['nftTokenAccount', getAddressDecoder()],
    ['tokenAmount', getU64Decoder()],
  ]);
}

export function getNftStakeAccountCodec(): Codec<
  NftStakeAccountArgs,
  NftStakeAccount
> {
  return combineCodec(getNftStakeAccountEncoder(), getNftStakeAccountDecoder());
}

export function decodeNftStakeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<NftStakeAccount, TAddress>;
export function decodeNftStakeAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<NftStakeAccount, TAddress>;
export function decodeNftStakeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<NftStakeAccount, TAddress>
  | MaybeAccount<NftStakeAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNftStakeAccountDecoder()
  );
}

export async function fetchNftStakeAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<NftStakeAccount, TAddress>> {
  const maybeAccount = await fetchMaybeNftStakeAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNftStakeAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<NftStakeAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNftStakeAccount(maybeAccount);
}

export async function fetchAllNftStakeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<NftStakeAccount>[]> {
  const maybeAccounts = await fetchAllMaybeNftStakeAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNftStakeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<NftStakeAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeNftStakeAccount(maybeAccount)
  );
}

export function getNftStakeAccountSize(): number {
  return 112;
}
