/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { MPL_CORE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getUpdateTypeDecoder,
  getUpdateTypeEncoder,
  type UpdateType,
  type UpdateTypeArgs,
} from '../types';

export const UPDATE_COLLECTION_INFO_V1_DISCRIMINATOR = 32;

export function getUpdateCollectionInfoV1DiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_COLLECTION_INFO_V1_DISCRIMINATOR);
}

export type UpdateCollectionInfoV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountBubblegumSigner extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCollection extends string
        ? WritableAccount<TAccountCollection>
        : TAccountCollection,
      TAccountBubblegumSigner extends string
        ? ReadonlySignerAccount<TAccountBubblegumSigner> &
            AccountSignerMeta<TAccountBubblegumSigner>
        : TAccountBubblegumSigner,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateCollectionInfoV1InstructionData = {
  discriminator: number;
  updateType: UpdateType;
  amount: number;
};

export type UpdateCollectionInfoV1InstructionDataArgs = {
  updateType: UpdateTypeArgs;
  amount: number;
};

export function getUpdateCollectionInfoV1InstructionDataEncoder(): FixedSizeEncoder<UpdateCollectionInfoV1InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['updateType', getUpdateTypeEncoder()],
      ['amount', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_COLLECTION_INFO_V1_DISCRIMINATOR,
    })
  );
}

export function getUpdateCollectionInfoV1InstructionDataDecoder(): FixedSizeDecoder<UpdateCollectionInfoV1InstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['updateType', getUpdateTypeDecoder()],
    ['amount', getU32Decoder()],
  ]);
}

export function getUpdateCollectionInfoV1InstructionDataCodec(): FixedSizeCodec<
  UpdateCollectionInfoV1InstructionDataArgs,
  UpdateCollectionInfoV1InstructionData
> {
  return combineCodec(
    getUpdateCollectionInfoV1InstructionDataEncoder(),
    getUpdateCollectionInfoV1InstructionDataDecoder()
  );
}

export type UpdateCollectionInfoV1Input<
  TAccountCollection extends string = string,
  TAccountBubblegumSigner extends string = string,
> = {
  /** The address of the asset */
  collection: Address<TAccountCollection>;
  /** Bubblegum PDA signer */
  bubblegumSigner: TransactionSigner<TAccountBubblegumSigner>;
  updateType: UpdateCollectionInfoV1InstructionDataArgs['updateType'];
  amount: UpdateCollectionInfoV1InstructionDataArgs['amount'];
};

export function getUpdateCollectionInfoV1Instruction<
  TAccountCollection extends string,
  TAccountBubblegumSigner extends string,
  TProgramAddress extends Address = typeof MPL_CORE_PROGRAM_ADDRESS,
>(
  input: UpdateCollectionInfoV1Input<
    TAccountCollection,
    TAccountBubblegumSigner
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateCollectionInfoV1Instruction<
  TProgramAddress,
  TAccountCollection,
  TAccountBubblegumSigner
> {
  // Program address.
  const programAddress = config?.programAddress ?? MPL_CORE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    collection: { value: input.collection ?? null, isWritable: true },
    bubblegumSigner: {
      value: input.bubblegumSigner ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.bubblegumSigner),
    ],
    data: getUpdateCollectionInfoV1InstructionDataEncoder().encode(
      args as UpdateCollectionInfoV1InstructionDataArgs
    ),
    programAddress,
  } as UpdateCollectionInfoV1Instruction<
    TProgramAddress,
    TAccountCollection,
    TAccountBubblegumSigner
  >);
}

export type ParsedUpdateCollectionInfoV1Instruction<
  TProgram extends string = typeof MPL_CORE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The address of the asset */
    collection: TAccountMetas[0];
    /** Bubblegum PDA signer */
    bubblegumSigner: TAccountMetas[1];
  };
  data: UpdateCollectionInfoV1InstructionData;
};

export function parseUpdateCollectionInfoV1Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateCollectionInfoV1Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      collection: getNextAccount(),
      bubblegumSigner: getNextAccount(),
    },
    data: getUpdateCollectionInfoV1InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
