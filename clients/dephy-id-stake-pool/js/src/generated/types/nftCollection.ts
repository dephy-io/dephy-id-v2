/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';

export type NftCollection = { __kind: 'MplCore'; fields: readonly [Address] };

export type NftCollectionArgs = NftCollection;

export function getNftCollectionEncoder(): Encoder<NftCollectionArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'MplCore',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
  ]);
}

export function getNftCollectionDecoder(): Decoder<NftCollection> {
  return getDiscriminatedUnionDecoder([
    [
      'MplCore',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
  ]);
}

export function getNftCollectionCodec(): Codec<
  NftCollectionArgs,
  NftCollection
> {
  return combineCodec(getNftCollectionEncoder(), getNftCollectionDecoder());
}

// Data Enum Helpers.
export function nftCollection(
  kind: 'MplCore',
  data: GetDiscriminatedUnionVariantContent<
    NftCollectionArgs,
    '__kind',
    'MplCore'
  >['fields']
): GetDiscriminatedUnionVariant<NftCollectionArgs, '__kind', 'MplCore'>;
export function nftCollection<K extends NftCollectionArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isNftCollection<K extends NftCollection['__kind']>(
  kind: K,
  value: NftCollection
): value is NftCollection & { __kind: K } {
  return value.__kind === kind;
}
