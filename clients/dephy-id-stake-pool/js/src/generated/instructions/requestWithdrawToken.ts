/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REQUEST_WITHDRAW_TOKEN_DISCRIMINATOR = new Uint8Array([
  49, 150, 198, 22, 253, 95, 59, 136,
]);

export function getRequestWithdrawTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REQUEST_WITHDRAW_TOKEN_DISCRIMINATOR
  );
}

export type RequestWithdrawTokenInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountStakePool extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountUserStakeAccount extends string | IAccountMeta<string> = string,
  TAccountWithdrawRequest extends string | IAccountMeta<string> = string,
  TAccountStakeTokenMint extends string | IAccountMeta<string> = string,
  TAccountStakeTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPoolWallet extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountUserStakeAccount extends string
        ? WritableAccount<TAccountUserStakeAccount>
        : TAccountUserStakeAccount,
      TAccountWithdrawRequest extends string
        ? WritableSignerAccount<TAccountWithdrawRequest> &
            IAccountSignerMeta<TAccountWithdrawRequest>
        : TAccountWithdrawRequest,
      TAccountStakeTokenMint extends string
        ? ReadonlyAccount<TAccountStakeTokenMint>
        : TAccountStakeTokenMint,
      TAccountStakeTokenAccount extends string
        ? WritableAccount<TAccountStakeTokenAccount>
        : TAccountStakeTokenAccount,
      TAccountPoolWallet extends string
        ? ReadonlyAccount<TAccountPoolWallet>
        : TAccountPoolWallet,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RequestWithdrawTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type RequestWithdrawTokenInstructionDataArgs = {
  amount: number | bigint;
};

export function getRequestWithdrawTokenInstructionDataEncoder(): Encoder<RequestWithdrawTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REQUEST_WITHDRAW_TOKEN_DISCRIMINATOR,
    })
  );
}

export function getRequestWithdrawTokenInstructionDataDecoder(): Decoder<RequestWithdrawTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getRequestWithdrawTokenInstructionDataCodec(): Codec<
  RequestWithdrawTokenInstructionDataArgs,
  RequestWithdrawTokenInstructionData
> {
  return combineCodec(
    getRequestWithdrawTokenInstructionDataEncoder(),
    getRequestWithdrawTokenInstructionDataDecoder()
  );
}

export type RequestWithdrawTokenAsyncInput<
  TAccountStakePool extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  user: TransactionSigner<TAccountUser>;
  userStakeAccount?: Address<TAccountUserStakeAccount>;
  withdrawRequest: TransactionSigner<TAccountWithdrawRequest>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  poolWallet?: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: RequestWithdrawTokenInstructionDataArgs['amount'];
};

export async function getRequestWithdrawTokenInstructionAsync<
  TAccountStakePool extends string,
  TAccountUser extends string,
  TAccountUserStakeAccount extends string,
  TAccountWithdrawRequest extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RequestWithdrawTokenAsyncInput<
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RequestWithdrawTokenInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userStakeAccount.value) {
    accounts.userStakeAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([85, 83, 69, 82, 95, 83, 84, 65, 75, 69])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.poolWallet.value) {
    accounts.poolWallet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getBytesEncoder().encode(
          new Uint8Array([80, 79, 79, 76, 95, 87, 65, 76, 76, 69, 84])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRequestWithdrawTokenInstructionDataEncoder().encode(
      args as RequestWithdrawTokenInstructionDataArgs
    ),
  } as RequestWithdrawTokenInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type RequestWithdrawTokenInput<
  TAccountStakePool extends string = string,
  TAccountUser extends string = string,
  TAccountUserStakeAccount extends string = string,
  TAccountWithdrawRequest extends string = string,
  TAccountStakeTokenMint extends string = string,
  TAccountStakeTokenAccount extends string = string,
  TAccountPoolWallet extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  stakePool: Address<TAccountStakePool>;
  user: TransactionSigner<TAccountUser>;
  userStakeAccount: Address<TAccountUserStakeAccount>;
  withdrawRequest: TransactionSigner<TAccountWithdrawRequest>;
  stakeTokenMint: Address<TAccountStakeTokenMint>;
  stakeTokenAccount: Address<TAccountStakeTokenAccount>;
  poolWallet: Address<TAccountPoolWallet>;
  payer: TransactionSigner<TAccountPayer>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: RequestWithdrawTokenInstructionDataArgs['amount'];
};

export function getRequestWithdrawTokenInstruction<
  TAccountStakePool extends string,
  TAccountUser extends string,
  TAccountUserStakeAccount extends string,
  TAccountWithdrawRequest extends string,
  TAccountStakeTokenMint extends string,
  TAccountStakeTokenAccount extends string,
  TAccountPoolWallet extends string,
  TAccountPayer extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
>(
  input: RequestWithdrawTokenInput<
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RequestWithdrawTokenInstruction<
  TProgramAddress,
  TAccountStakePool,
  TAccountUser,
  TAccountUserStakeAccount,
  TAccountWithdrawRequest,
  TAccountStakeTokenMint,
  TAccountStakeTokenAccount,
  TAccountPoolWallet,
  TAccountPayer,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    userStakeAccount: {
      value: input.userStakeAccount ?? null,
      isWritable: true,
    },
    withdrawRequest: { value: input.withdrawRequest ?? null, isWritable: true },
    stakeTokenMint: { value: input.stakeTokenMint ?? null, isWritable: false },
    stakeTokenAccount: {
      value: input.stakeTokenAccount ?? null,
      isWritable: true,
    },
    poolWallet: { value: input.poolWallet ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userStakeAccount),
      getAccountMeta(accounts.withdrawRequest),
      getAccountMeta(accounts.stakeTokenMint),
      getAccountMeta(accounts.stakeTokenAccount),
      getAccountMeta(accounts.poolWallet),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRequestWithdrawTokenInstructionDataEncoder().encode(
      args as RequestWithdrawTokenInstructionDataArgs
    ),
  } as RequestWithdrawTokenInstruction<
    TProgramAddress,
    TAccountStakePool,
    TAccountUser,
    TAccountUserStakeAccount,
    TAccountWithdrawRequest,
    TAccountStakeTokenMint,
    TAccountStakeTokenAccount,
    TAccountPoolWallet,
    TAccountPayer,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedRequestWithdrawTokenInstruction<
  TProgram extends string = typeof DEPHY_ID_STAKE_POOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stakePool: TAccountMetas[0];
    user: TAccountMetas[1];
    userStakeAccount: TAccountMetas[2];
    withdrawRequest: TAccountMetas[3];
    stakeTokenMint: TAccountMetas[4];
    stakeTokenAccount: TAccountMetas[5];
    poolWallet: TAccountMetas[6];
    payer: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: RequestWithdrawTokenInstructionData;
};

export function parseRequestWithdrawTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRequestWithdrawTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stakePool: getNextAccount(),
      user: getNextAccount(),
      userStakeAccount: getNextAccount(),
      withdrawRequest: getNextAccount(),
      stakeTokenMint: getNextAccount(),
      stakeTokenAccount: getNextAccount(),
      poolWallet: getNextAccount(),
      payer: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRequestWithdrawTokenInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
